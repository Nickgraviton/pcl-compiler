Terminals unused in grammar

   EOF_T


State 130 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: PROGRAM IDENTIFIER SEMI_COLON body DOT

    2 body: next_local block

    3 next_local: next_local local
    4           | %empty

    5 local: VAR IDENTIFIER next_id COLON type SEMI_COLON next_var
    6      | LABEL IDENTIFIER next_id SEMI_COLON
    7      | header SEMI_COLON body SEMI_COLON
    8      | FORWARD header SEMI_COLON

    9 next_var: next_var IDENTIFIER next_id COLON type SEMI_COLON
   10         | %empty

   11 next_id: next_id COMMA IDENTIFIER
   12        | %empty

   13 header: PROCEDURE IDENTIFIER OP_PAR optional_arguments CLOS_PAR
   14       | FUNCTION IDENTIFIER OP_PAR optional_arguments CLOS_PAR COLON type

   15 optional_arguments: formal next_arg
   16                   | %empty

   17 next_arg: next_arg SEMI_COLON formal
   18         | %empty

   19 formal: optional_var IDENTIFIER next_id COLON type

   20 optional_var: VAR
   21             | %empty

   22 type: INTEGER
   23     | REAL
   24     | BOOLEAN
   25     | CHAR
   26     | ARRAY optional_size OF type
   27     | CARET type

   28 optional_size: OP_BRACK INT_CONST CLOS_BRACK
   29              | %empty

   30 block: BEGIN_ST stmt next_stmt END

   31 next_stmt: next_stmt SEMI_COLON stmt
   32          | %empty

   33 stmt: %empty
   34     | l_value ASSIGN expr
   35     | block
   36     | call
   37     | IF expr THEN stmt
   38     | IF expr THEN stmt ELSE stmt
   39     | WHILE expr DO stmt
   40     | IDENTIFIER COLON stmt
   41     | GOTO IDENTIFIER
   42     | RETURN
   43     | NEW optional_expr l_value
   44     | DISPOSE optional_bracket l_value

   45 optional_expr: OP_BRACK expr CLOS_BRACK
   46              | %empty

   47 optional_bracket: OP_BRACK CLOS_BRACK
   48                 | %empty

   49 expr: l_value
   50     | r_value

   51 l_value: IDENTIFIER
   52        | RESULT
   53        | STRING_LITERAL
   54        | l_value OP_BRACK expr CLOS_BRACK
   55        | expr CARET
   56        | OP_PAR l_value CLOS_PAR

   57 r_value: INT_CONST
   58        | TRUE
   59        | FALSE
   60        | REAL_CONST
   61        | CHAR_CONST
   62        | NIL
   63        | OP_PAR r_value CLOS_PAR
   64        | call
   65        | AT expr
   66        | unop expr
   67        | expr PLUS expr
   68        | expr MINUS expr
   69        | expr MUL expr
   70        | expr DIV expr
   71        | expr INT_DIV expr
   72        | expr MOD expr
   73        | expr OR expr
   74        | expr AND expr
   75        | expr EQUAL expr
   76        | expr NOT_EQUAL expr
   77        | expr LT expr
   78        | expr LE expr
   79        | expr GT expr
   80        | expr GE expr

   81 call: IDENTIFIER OP_PAR optional_parameters CLOS_PAR

   82 optional_parameters: IDENTIFIER OP_PAR expr next_expr CLOS_PAR
   83                    | %empty

   84 next_expr: next_expr COMMA expr
   85          | %empty

   86 unop: NOT
   87     | PLUS
   88     | MINUS


Terminals, with rules where they appear

$end (0) 0
error (256)
EOF_T (258)
ARRAY (259) 26
OF (260) 26
DISPOSE (261) 44
NEW (262) 43
CARET (263) 27 55
AT (264) 65
BEGIN_ST (265) 30
DO (266) 39
END (267) 30
IF (268) 37 38
THEN (269) 37 38
ELSE (270) 38
WHILE (271) 39
AND (272) 74
OR (273) 73
NOT (274) 86
BOOLEAN (275) 24
CHAR (276) 25
INTEGER (277) 22
REAL (278) 23
FORWARD (279) 8
FUNCTION (280) 14
PROCEDURE (281) 13
PROGRAM (282) 1
RESULT (283) 52
RETURN (284) 42
VAR (285) 5 20
ASSIGN (286) 34
SEMI_COLON (287) 1 5 6 7 8 9 17 31
DOT (288) 1
COLON (289) 5 9 14 19 40
COMMA (290) 11 84
LABEL (291) 6
GOTO (292) 41
IDENTIFIER (293) 1 5 6 9 11 13 14 19 40 41 51 81 82
INT_CONST (294) 28 57
REAL_CONST (295) 60
CHAR_CONST (296) 61
STRING_LITERAL (297) 53
TRUE (298) 58
FALSE (299) 59
NIL (300) 62
PLUS (301) 67 87
MINUS (302) 68 88
MUL (303) 69
DIV (304) 70
INT_DIV (305) 71
MOD (306) 72
EQUAL (307) 75
NOT_EQUAL (308) 76
GT (309) 79
LT (310) 77
GE (311) 80
LE (312) 78
OP_PAR (313) 13 14 56 63 81 82
CLOS_PAR (314) 13 14 56 63 81 82
OP_BRACK (315) 28 45 47 54
CLOS_BRACK (316) 28 45 47 54
UNOP (317)
R_VAL (318)


Nonterminals, with rules where they appear

$accept (64)
    on left: 0
program (65)
    on left: 1, on right: 0
body (66)
    on left: 2, on right: 1 7
next_local (67)
    on left: 3 4, on right: 2 3
local (68)
    on left: 5 6 7 8, on right: 3
next_var (69)
    on left: 9 10, on right: 5 9
next_id (70)
    on left: 11 12, on right: 5 6 9 11 19
header (71)
    on left: 13 14, on right: 7 8
optional_arguments (72)
    on left: 15 16, on right: 13 14
next_arg (73)
    on left: 17 18, on right: 15 17
formal (74)
    on left: 19, on right: 15 17
optional_var (75)
    on left: 20 21, on right: 19
type (76)
    on left: 22 23 24 25 26 27, on right: 5 9 14 19 26 27
optional_size (77)
    on left: 28 29, on right: 26
block (78)
    on left: 30, on right: 2 35
next_stmt (79)
    on left: 31 32, on right: 30 31
stmt (80)
    on left: 33 34 35 36 37 38 39 40 41 42 43 44, on right: 30 31 37
    38 39 40
optional_expr (81)
    on left: 45 46, on right: 43
optional_bracket (82)
    on left: 47 48, on right: 44
expr (83)
    on left: 49 50, on right: 34 37 38 39 45 54 55 65 66 67 68 69 70
    71 72 73 74 75 76 77 78 79 80 82 84
l_value (84)
    on left: 51 52 53 54 55 56, on right: 34 43 44 49 54 56
r_value (85)
    on left: 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74
    75 76 77 78 79 80, on right: 50 63
call (86)
    on left: 81, on right: 36 64
optional_parameters (87)
    on left: 82 83, on right: 81
next_expr (88)
    on left: 84 85, on right: 82 84
unop (89)
    on left: 86 87 88, on right: 66


State 0

    0 $accept: . program $end

    PROGRAM  shift, and go to state 1

    program  go to state 2


State 1

    1 program: PROGRAM . IDENTIFIER SEMI_COLON body DOT

    IDENTIFIER  shift, and go to state 3


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    1 program: PROGRAM IDENTIFIER . SEMI_COLON body DOT

    SEMI_COLON  shift, and go to state 5


State 4

    0 $accept: program $end .

    $default  accept


State 5

    1 program: PROGRAM IDENTIFIER SEMI_COLON . body DOT

    $default  reduce using rule 4 (next_local)

    body        go to state 6
    next_local  go to state 7


State 6

    1 program: PROGRAM IDENTIFIER SEMI_COLON body . DOT

    DOT  shift, and go to state 8


State 7

    2 body: next_local . block
    3 next_local: next_local . local

    BEGIN_ST   shift, and go to state 9
    FORWARD    shift, and go to state 10
    FUNCTION   shift, and go to state 11
    PROCEDURE  shift, and go to state 12
    VAR        shift, and go to state 13
    LABEL      shift, and go to state 14

    local   go to state 15
    header  go to state 16
    block   go to state 17


State 8

    1 program: PROGRAM IDENTIFIER SEMI_COLON body DOT .

    $default  reduce using rule 1 (program)


State 9

   30 block: BEGIN_ST . stmt next_stmt END

    DISPOSE         shift, and go to state 18
    NEW             shift, and go to state 19
    AT              shift, and go to state 20
    BEGIN_ST        shift, and go to state 9
    IF              shift, and go to state 21
    WHILE           shift, and go to state 22
    NOT             shift, and go to state 23
    RESULT          shift, and go to state 24
    RETURN          shift, and go to state 25
    GOTO            shift, and go to state 26
    IDENTIFIER      shift, and go to state 27
    INT_CONST       shift, and go to state 28
    REAL_CONST      shift, and go to state 29
    CHAR_CONST      shift, and go to state 30
    STRING_LITERAL  shift, and go to state 31
    TRUE            shift, and go to state 32
    FALSE           shift, and go to state 33
    NIL             shift, and go to state 34
    PLUS            shift, and go to state 35
    MINUS           shift, and go to state 36
    OP_PAR          shift, and go to state 37

    $default  reduce using rule 33 (stmt)

    block    go to state 38
    stmt     go to state 39
    expr     go to state 40
    l_value  go to state 41
    r_value  go to state 42
    call     go to state 43
    unop     go to state 44


State 10

    8 local: FORWARD . header SEMI_COLON

    FUNCTION   shift, and go to state 11
    PROCEDURE  shift, and go to state 12

    header  go to state 45


State 11

   14 header: FUNCTION . IDENTIFIER OP_PAR optional_arguments CLOS_PAR COLON type

    IDENTIFIER  shift, and go to state 46


State 12

   13 header: PROCEDURE . IDENTIFIER OP_PAR optional_arguments CLOS_PAR

    IDENTIFIER  shift, and go to state 47


State 13

    5 local: VAR . IDENTIFIER next_id COLON type SEMI_COLON next_var

    IDENTIFIER  shift, and go to state 48


State 14

    6 local: LABEL . IDENTIFIER next_id SEMI_COLON

    IDENTIFIER  shift, and go to state 49


State 15

    3 next_local: next_local local .

    $default  reduce using rule 3 (next_local)


State 16

    7 local: header . SEMI_COLON body SEMI_COLON

    SEMI_COLON  shift, and go to state 50


State 17

    2 body: next_local block .

    $default  reduce using rule 2 (body)


State 18

   44 stmt: DISPOSE . optional_bracket l_value

    OP_BRACK  shift, and go to state 51

    $default  reduce using rule 48 (optional_bracket)

    optional_bracket  go to state 52


State 19

   43 stmt: NEW . optional_expr l_value

    OP_BRACK  shift, and go to state 53

    $default  reduce using rule 46 (optional_expr)

    optional_expr  go to state 54


State 20

   65 r_value: AT . expr

    AT              shift, and go to state 20
    NOT             shift, and go to state 23
    RESULT          shift, and go to state 24
    IDENTIFIER      shift, and go to state 55
    INT_CONST       shift, and go to state 28
    REAL_CONST      shift, and go to state 29
    CHAR_CONST      shift, and go to state 30
    STRING_LITERAL  shift, and go to state 31
    TRUE            shift, and go to state 32
    FALSE           shift, and go to state 33
    NIL             shift, and go to state 34
    PLUS            shift, and go to state 35
    MINUS           shift, and go to state 36
    OP_PAR          shift, and go to state 37

    expr     go to state 56
    l_value  go to state 57
    r_value  go to state 42
    call     go to state 58
    unop     go to state 44


State 21

   37 stmt: IF . expr THEN stmt
   38     | IF . expr THEN stmt ELSE stmt

    AT              shift, and go to state 20
    NOT             shift, and go to state 23
    RESULT          shift, and go to state 24
    IDENTIFIER      shift, and go to state 55
    INT_CONST       shift, and go to state 28
    REAL_CONST      shift, and go to state 29
    CHAR_CONST      shift, and go to state 30
    STRING_LITERAL  shift, and go to state 31
    TRUE            shift, and go to state 32
    FALSE           shift, and go to state 33
    NIL             shift, and go to state 34
    PLUS            shift, and go to state 35
    MINUS           shift, and go to state 36
    OP_PAR          shift, and go to state 37

    expr     go to state 59
    l_value  go to state 57
    r_value  go to state 42
    call     go to state 58
    unop     go to state 44


State 22

   39 stmt: WHILE . expr DO stmt

    AT              shift, and go to state 20
    NOT             shift, and go to state 23
    RESULT          shift, and go to state 24
    IDENTIFIER      shift, and go to state 55
    INT_CONST       shift, and go to state 28
    REAL_CONST      shift, and go to state 29
    CHAR_CONST      shift, and go to state 30
    STRING_LITERAL  shift, and go to state 31
    TRUE            shift, and go to state 32
    FALSE           shift, and go to state 33
    NIL             shift, and go to state 34
    PLUS            shift, and go to state 35
    MINUS           shift, and go to state 36
    OP_PAR          shift, and go to state 37

    expr     go to state 60
    l_value  go to state 57
    r_value  go to state 42
    call     go to state 58
    unop     go to state 44


State 23

   86 unop: NOT .

    $default  reduce using rule 86 (unop)


State 24

   52 l_value: RESULT .

    $default  reduce using rule 52 (l_value)


State 25

   42 stmt: RETURN .

    $default  reduce using rule 42 (stmt)


State 26

   41 stmt: GOTO . IDENTIFIER

    IDENTIFIER  shift, and go to state 61


State 27

   40 stmt: IDENTIFIER . COLON stmt
   51 l_value: IDENTIFIER .
   81 call: IDENTIFIER . OP_PAR optional_parameters CLOS_PAR

    COLON   shift, and go to state 62
    OP_PAR  shift, and go to state 63

    $default  reduce using rule 51 (l_value)


State 28

   57 r_value: INT_CONST .

    $default  reduce using rule 57 (r_value)


State 29

   60 r_value: REAL_CONST .

    $default  reduce using rule 60 (r_value)


State 30

   61 r_value: CHAR_CONST .

    $default  reduce using rule 61 (r_value)


State 31

   53 l_value: STRING_LITERAL .

    $default  reduce using rule 53 (l_value)


State 32

   58 r_value: TRUE .

    $default  reduce using rule 58 (r_value)


State 33

   59 r_value: FALSE .

    $default  reduce using rule 59 (r_value)


State 34

   62 r_value: NIL .

    $default  reduce using rule 62 (r_value)


State 35

   87 unop: PLUS .

    $default  reduce using rule 87 (unop)


State 36

   88 unop: MINUS .

    $default  reduce using rule 88 (unop)


State 37

   56 l_value: OP_PAR . l_value CLOS_PAR
   63 r_value: OP_PAR . r_value CLOS_PAR

    AT              shift, and go to state 20
    NOT             shift, and go to state 23
    RESULT          shift, and go to state 24
    IDENTIFIER      shift, and go to state 55
    INT_CONST       shift, and go to state 28
    REAL_CONST      shift, and go to state 29
    CHAR_CONST      shift, and go to state 30
    STRING_LITERAL  shift, and go to state 31
    TRUE            shift, and go to state 32
    FALSE           shift, and go to state 33
    NIL             shift, and go to state 34
    PLUS            shift, and go to state 35
    MINUS           shift, and go to state 36
    OP_PAR          shift, and go to state 37

    expr     go to state 40
    l_value  go to state 64
    r_value  go to state 65
    call     go to state 58
    unop     go to state 44


State 38

   35 stmt: block .

    $default  reduce using rule 35 (stmt)


State 39

   30 block: BEGIN_ST stmt . next_stmt END

    $default  reduce using rule 32 (next_stmt)

    next_stmt  go to state 66


State 40

   55 l_value: expr . CARET
   67 r_value: expr . PLUS expr
   68        | expr . MINUS expr
   69        | expr . MUL expr
   70        | expr . DIV expr
   71        | expr . INT_DIV expr
   72        | expr . MOD expr
   73        | expr . OR expr
   74        | expr . AND expr
   75        | expr . EQUAL expr
   76        | expr . NOT_EQUAL expr
   77        | expr . LT expr
   78        | expr . LE expr
   79        | expr . GT expr
   80        | expr . GE expr

    CARET      shift, and go to state 67
    AND        shift, and go to state 68
    OR         shift, and go to state 69
    PLUS       shift, and go to state 70
    MINUS      shift, and go to state 71
    MUL        shift, and go to state 72
    DIV        shift, and go to state 73
    INT_DIV    shift, and go to state 74
    MOD        shift, and go to state 75
    EQUAL      shift, and go to state 76
    NOT_EQUAL  shift, and go to state 77
    GT         shift, and go to state 78
    LT         shift, and go to state 79
    GE         shift, and go to state 80
    LE         shift, and go to state 81


State 41

   34 stmt: l_value . ASSIGN expr
   49 expr: l_value .
   54 l_value: l_value . OP_BRACK expr CLOS_BRACK

    ASSIGN    shift, and go to state 82
    OP_BRACK  shift, and go to state 83

    $default  reduce using rule 49 (expr)


State 42

   50 expr: r_value .

    $default  reduce using rule 50 (expr)


State 43

   36 stmt: call .
   64 r_value: call .

    END         reduce using rule 36 (stmt)
    ELSE        reduce using rule 36 (stmt)
    SEMI_COLON  reduce using rule 36 (stmt)
    $default    reduce using rule 64 (r_value)


State 44

   66 r_value: unop . expr

    AT              shift, and go to state 20
    NOT             shift, and go to state 23
    RESULT          shift, and go to state 24
    IDENTIFIER      shift, and go to state 55
    INT_CONST       shift, and go to state 28
    REAL_CONST      shift, and go to state 29
    CHAR_CONST      shift, and go to state 30
    STRING_LITERAL  shift, and go to state 31
    TRUE            shift, and go to state 32
    FALSE           shift, and go to state 33
    NIL             shift, and go to state 34
    PLUS            shift, and go to state 35
    MINUS           shift, and go to state 36
    OP_PAR          shift, and go to state 37

    expr     go to state 84
    l_value  go to state 57
    r_value  go to state 42
    call     go to state 58
    unop     go to state 44


State 45

    8 local: FORWARD header . SEMI_COLON

    SEMI_COLON  shift, and go to state 85


State 46

   14 header: FUNCTION IDENTIFIER . OP_PAR optional_arguments CLOS_PAR COLON type

    OP_PAR  shift, and go to state 86


State 47

   13 header: PROCEDURE IDENTIFIER . OP_PAR optional_arguments CLOS_PAR

    OP_PAR  shift, and go to state 87


State 48

    5 local: VAR IDENTIFIER . next_id COLON type SEMI_COLON next_var

    $default  reduce using rule 12 (next_id)

    next_id  go to state 88


State 49

    6 local: LABEL IDENTIFIER . next_id SEMI_COLON

    $default  reduce using rule 12 (next_id)

    next_id  go to state 89


State 50

    7 local: header SEMI_COLON . body SEMI_COLON

    $default  reduce using rule 4 (next_local)

    body        go to state 90
    next_local  go to state 7


State 51

   47 optional_bracket: OP_BRACK . CLOS_BRACK

    CLOS_BRACK  shift, and go to state 91


State 52

   44 stmt: DISPOSE optional_bracket . l_value

    AT              shift, and go to state 20
    NOT             shift, and go to state 23
    RESULT          shift, and go to state 24
    IDENTIFIER      shift, and go to state 55
    INT_CONST       shift, and go to state 28
    REAL_CONST      shift, and go to state 29
    CHAR_CONST      shift, and go to state 30
    STRING_LITERAL  shift, and go to state 31
    TRUE            shift, and go to state 32
    FALSE           shift, and go to state 33
    NIL             shift, and go to state 34
    PLUS            shift, and go to state 35
    MINUS           shift, and go to state 36
    OP_PAR          shift, and go to state 37

    expr     go to state 40
    l_value  go to state 92
    r_value  go to state 42
    call     go to state 58
    unop     go to state 44


State 53

   45 optional_expr: OP_BRACK . expr CLOS_BRACK

    AT              shift, and go to state 20
    NOT             shift, and go to state 23
    RESULT          shift, and go to state 24
    IDENTIFIER      shift, and go to state 55
    INT_CONST       shift, and go to state 28
    REAL_CONST      shift, and go to state 29
    CHAR_CONST      shift, and go to state 30
    STRING_LITERAL  shift, and go to state 31
    TRUE            shift, and go to state 32
    FALSE           shift, and go to state 33
    NIL             shift, and go to state 34
    PLUS            shift, and go to state 35
    MINUS           shift, and go to state 36
    OP_PAR          shift, and go to state 37

    expr     go to state 93
    l_value  go to state 57
    r_value  go to state 42
    call     go to state 58
    unop     go to state 44


State 54

   43 stmt: NEW optional_expr . l_value

    AT              shift, and go to state 20
    NOT             shift, and go to state 23
    RESULT          shift, and go to state 24
    IDENTIFIER      shift, and go to state 55
    INT_CONST       shift, and go to state 28
    REAL_CONST      shift, and go to state 29
    CHAR_CONST      shift, and go to state 30
    STRING_LITERAL  shift, and go to state 31
    TRUE            shift, and go to state 32
    FALSE           shift, and go to state 33
    NIL             shift, and go to state 34
    PLUS            shift, and go to state 35
    MINUS           shift, and go to state 36
    OP_PAR          shift, and go to state 37

    expr     go to state 40
    l_value  go to state 94
    r_value  go to state 42
    call     go to state 58
    unop     go to state 44


State 55

   51 l_value: IDENTIFIER .
   81 call: IDENTIFIER . OP_PAR optional_parameters CLOS_PAR

    OP_PAR  shift, and go to state 63

    $default  reduce using rule 51 (l_value)


State 56

   55 l_value: expr . CARET
   65 r_value: AT expr .
   67        | expr . PLUS expr
   68        | expr . MINUS expr
   69        | expr . MUL expr
   70        | expr . DIV expr
   71        | expr . INT_DIV expr
   72        | expr . MOD expr
   73        | expr . OR expr
   74        | expr . AND expr
   75        | expr . EQUAL expr
   76        | expr . NOT_EQUAL expr
   77        | expr . LT expr
   78        | expr . LE expr
   79        | expr . GT expr
   80        | expr . GE expr

    CARET  error (nonassociative)

    $default  reduce using rule 65 (r_value)


State 57

   49 expr: l_value .
   54 l_value: l_value . OP_BRACK expr CLOS_BRACK

    OP_BRACK  shift, and go to state 83

    $default  reduce using rule 49 (expr)


State 58

   64 r_value: call .

    $default  reduce using rule 64 (r_value)


State 59

   37 stmt: IF expr . THEN stmt
   38     | IF expr . THEN stmt ELSE stmt
   55 l_value: expr . CARET
   67 r_value: expr . PLUS expr
   68        | expr . MINUS expr
   69        | expr . MUL expr
   70        | expr . DIV expr
   71        | expr . INT_DIV expr
   72        | expr . MOD expr
   73        | expr . OR expr
   74        | expr . AND expr
   75        | expr . EQUAL expr
   76        | expr . NOT_EQUAL expr
   77        | expr . LT expr
   78        | expr . LE expr
   79        | expr . GT expr
   80        | expr . GE expr

    CARET      shift, and go to state 67
    THEN       shift, and go to state 95
    AND        shift, and go to state 68
    OR         shift, and go to state 69
    PLUS       shift, and go to state 70
    MINUS      shift, and go to state 71
    MUL        shift, and go to state 72
    DIV        shift, and go to state 73
    INT_DIV    shift, and go to state 74
    MOD        shift, and go to state 75
    EQUAL      shift, and go to state 76
    NOT_EQUAL  shift, and go to state 77
    GT         shift, and go to state 78
    LT         shift, and go to state 79
    GE         shift, and go to state 80
    LE         shift, and go to state 81


State 60

   39 stmt: WHILE expr . DO stmt
   55 l_value: expr . CARET
   67 r_value: expr . PLUS expr
   68        | expr . MINUS expr
   69        | expr . MUL expr
   70        | expr . DIV expr
   71        | expr . INT_DIV expr
   72        | expr . MOD expr
   73        | expr . OR expr
   74        | expr . AND expr
   75        | expr . EQUAL expr
   76        | expr . NOT_EQUAL expr
   77        | expr . LT expr
   78        | expr . LE expr
   79        | expr . GT expr
   80        | expr . GE expr

    CARET      shift, and go to state 67
    DO         shift, and go to state 96
    AND        shift, and go to state 68
    OR         shift, and go to state 69
    PLUS       shift, and go to state 70
    MINUS      shift, and go to state 71
    MUL        shift, and go to state 72
    DIV        shift, and go to state 73
    INT_DIV    shift, and go to state 74
    MOD        shift, and go to state 75
    EQUAL      shift, and go to state 76
    NOT_EQUAL  shift, and go to state 77
    GT         shift, and go to state 78
    LT         shift, and go to state 79
    GE         shift, and go to state 80
    LE         shift, and go to state 81


State 61

   41 stmt: GOTO IDENTIFIER .

    $default  reduce using rule 41 (stmt)


State 62

   40 stmt: IDENTIFIER COLON . stmt

    DISPOSE         shift, and go to state 18
    NEW             shift, and go to state 19
    AT              shift, and go to state 20
    BEGIN_ST        shift, and go to state 9
    IF              shift, and go to state 21
    WHILE           shift, and go to state 22
    NOT             shift, and go to state 23
    RESULT          shift, and go to state 24
    RETURN          shift, and go to state 25
    GOTO            shift, and go to state 26
    IDENTIFIER      shift, and go to state 27
    INT_CONST       shift, and go to state 28
    REAL_CONST      shift, and go to state 29
    CHAR_CONST      shift, and go to state 30
    STRING_LITERAL  shift, and go to state 31
    TRUE            shift, and go to state 32
    FALSE           shift, and go to state 33
    NIL             shift, and go to state 34
    PLUS            shift, and go to state 35
    MINUS           shift, and go to state 36
    OP_PAR          shift, and go to state 37

    $default  reduce using rule 33 (stmt)

    block    go to state 38
    stmt     go to state 97
    expr     go to state 40
    l_value  go to state 41
    r_value  go to state 42
    call     go to state 43
    unop     go to state 44


State 63

   81 call: IDENTIFIER OP_PAR . optional_parameters CLOS_PAR

    IDENTIFIER  shift, and go to state 98

    $default  reduce using rule 83 (optional_parameters)

    optional_parameters  go to state 99


State 64

   49 expr: l_value .
   54 l_value: l_value . OP_BRACK expr CLOS_BRACK
   56        | OP_PAR l_value . CLOS_PAR

    CLOS_PAR  shift, and go to state 100
    OP_BRACK  shift, and go to state 83

    $default  reduce using rule 49 (expr)


State 65

   50 expr: r_value .
   63 r_value: OP_PAR r_value . CLOS_PAR

    CLOS_PAR  shift, and go to state 101

    $default  reduce using rule 50 (expr)


State 66

   30 block: BEGIN_ST stmt next_stmt . END
   31 next_stmt: next_stmt . SEMI_COLON stmt

    END         shift, and go to state 102
    SEMI_COLON  shift, and go to state 103


State 67

   55 l_value: expr CARET .

    $default  reduce using rule 55 (l_value)


State 68

   74 r_value: expr AND . expr

    AT              shift, and go to state 20
    NOT             shift, and go to state 23
    RESULT          shift, and go to state 24
    IDENTIFIER      shift, and go to state 55
    INT_CONST       shift, and go to state 28
    REAL_CONST      shift, and go to state 29
    CHAR_CONST      shift, and go to state 30
    STRING_LITERAL  shift, and go to state 31
    TRUE            shift, and go to state 32
    FALSE           shift, and go to state 33
    NIL             shift, and go to state 34
    PLUS            shift, and go to state 35
    MINUS           shift, and go to state 36
    OP_PAR          shift, and go to state 37

    expr     go to state 104
    l_value  go to state 57
    r_value  go to state 42
    call     go to state 58
    unop     go to state 44


State 69

   73 r_value: expr OR . expr

    AT              shift, and go to state 20
    NOT             shift, and go to state 23
    RESULT          shift, and go to state 24
    IDENTIFIER      shift, and go to state 55
    INT_CONST       shift, and go to state 28
    REAL_CONST      shift, and go to state 29
    CHAR_CONST      shift, and go to state 30
    STRING_LITERAL  shift, and go to state 31
    TRUE            shift, and go to state 32
    FALSE           shift, and go to state 33
    NIL             shift, and go to state 34
    PLUS            shift, and go to state 35
    MINUS           shift, and go to state 36
    OP_PAR          shift, and go to state 37

    expr     go to state 105
    l_value  go to state 57
    r_value  go to state 42
    call     go to state 58
    unop     go to state 44


State 70

   67 r_value: expr PLUS . expr

    AT              shift, and go to state 20
    NOT             shift, and go to state 23
    RESULT          shift, and go to state 24
    IDENTIFIER      shift, and go to state 55
    INT_CONST       shift, and go to state 28
    REAL_CONST      shift, and go to state 29
    CHAR_CONST      shift, and go to state 30
    STRING_LITERAL  shift, and go to state 31
    TRUE            shift, and go to state 32
    FALSE           shift, and go to state 33
    NIL             shift, and go to state 34
    PLUS            shift, and go to state 35
    MINUS           shift, and go to state 36
    OP_PAR          shift, and go to state 37

    expr     go to state 106
    l_value  go to state 57
    r_value  go to state 42
    call     go to state 58
    unop     go to state 44


State 71

   68 r_value: expr MINUS . expr

    AT              shift, and go to state 20
    NOT             shift, and go to state 23
    RESULT          shift, and go to state 24
    IDENTIFIER      shift, and go to state 55
    INT_CONST       shift, and go to state 28
    REAL_CONST      shift, and go to state 29
    CHAR_CONST      shift, and go to state 30
    STRING_LITERAL  shift, and go to state 31
    TRUE            shift, and go to state 32
    FALSE           shift, and go to state 33
    NIL             shift, and go to state 34
    PLUS            shift, and go to state 35
    MINUS           shift, and go to state 36
    OP_PAR          shift, and go to state 37

    expr     go to state 107
    l_value  go to state 57
    r_value  go to state 42
    call     go to state 58
    unop     go to state 44


State 72

   69 r_value: expr MUL . expr

    AT              shift, and go to state 20
    NOT             shift, and go to state 23
    RESULT          shift, and go to state 24
    IDENTIFIER      shift, and go to state 55
    INT_CONST       shift, and go to state 28
    REAL_CONST      shift, and go to state 29
    CHAR_CONST      shift, and go to state 30
    STRING_LITERAL  shift, and go to state 31
    TRUE            shift, and go to state 32
    FALSE           shift, and go to state 33
    NIL             shift, and go to state 34
    PLUS            shift, and go to state 35
    MINUS           shift, and go to state 36
    OP_PAR          shift, and go to state 37

    expr     go to state 108
    l_value  go to state 57
    r_value  go to state 42
    call     go to state 58
    unop     go to state 44


State 73

   70 r_value: expr DIV . expr

    AT              shift, and go to state 20
    NOT             shift, and go to state 23
    RESULT          shift, and go to state 24
    IDENTIFIER      shift, and go to state 55
    INT_CONST       shift, and go to state 28
    REAL_CONST      shift, and go to state 29
    CHAR_CONST      shift, and go to state 30
    STRING_LITERAL  shift, and go to state 31
    TRUE            shift, and go to state 32
    FALSE           shift, and go to state 33
    NIL             shift, and go to state 34
    PLUS            shift, and go to state 35
    MINUS           shift, and go to state 36
    OP_PAR          shift, and go to state 37

    expr     go to state 109
    l_value  go to state 57
    r_value  go to state 42
    call     go to state 58
    unop     go to state 44


State 74

   71 r_value: expr INT_DIV . expr

    AT              shift, and go to state 20
    NOT             shift, and go to state 23
    RESULT          shift, and go to state 24
    IDENTIFIER      shift, and go to state 55
    INT_CONST       shift, and go to state 28
    REAL_CONST      shift, and go to state 29
    CHAR_CONST      shift, and go to state 30
    STRING_LITERAL  shift, and go to state 31
    TRUE            shift, and go to state 32
    FALSE           shift, and go to state 33
    NIL             shift, and go to state 34
    PLUS            shift, and go to state 35
    MINUS           shift, and go to state 36
    OP_PAR          shift, and go to state 37

    expr     go to state 110
    l_value  go to state 57
    r_value  go to state 42
    call     go to state 58
    unop     go to state 44


State 75

   72 r_value: expr MOD . expr

    AT              shift, and go to state 20
    NOT             shift, and go to state 23
    RESULT          shift, and go to state 24
    IDENTIFIER      shift, and go to state 55
    INT_CONST       shift, and go to state 28
    REAL_CONST      shift, and go to state 29
    CHAR_CONST      shift, and go to state 30
    STRING_LITERAL  shift, and go to state 31
    TRUE            shift, and go to state 32
    FALSE           shift, and go to state 33
    NIL             shift, and go to state 34
    PLUS            shift, and go to state 35
    MINUS           shift, and go to state 36
    OP_PAR          shift, and go to state 37

    expr     go to state 111
    l_value  go to state 57
    r_value  go to state 42
    call     go to state 58
    unop     go to state 44


State 76

   75 r_value: expr EQUAL . expr

    AT              shift, and go to state 20
    NOT             shift, and go to state 23
    RESULT          shift, and go to state 24
    IDENTIFIER      shift, and go to state 55
    INT_CONST       shift, and go to state 28
    REAL_CONST      shift, and go to state 29
    CHAR_CONST      shift, and go to state 30
    STRING_LITERAL  shift, and go to state 31
    TRUE            shift, and go to state 32
    FALSE           shift, and go to state 33
    NIL             shift, and go to state 34
    PLUS            shift, and go to state 35
    MINUS           shift, and go to state 36
    OP_PAR          shift, and go to state 37

    expr     go to state 112
    l_value  go to state 57
    r_value  go to state 42
    call     go to state 58
    unop     go to state 44


State 77

   76 r_value: expr NOT_EQUAL . expr

    AT              shift, and go to state 20
    NOT             shift, and go to state 23
    RESULT          shift, and go to state 24
    IDENTIFIER      shift, and go to state 55
    INT_CONST       shift, and go to state 28
    REAL_CONST      shift, and go to state 29
    CHAR_CONST      shift, and go to state 30
    STRING_LITERAL  shift, and go to state 31
    TRUE            shift, and go to state 32
    FALSE           shift, and go to state 33
    NIL             shift, and go to state 34
    PLUS            shift, and go to state 35
    MINUS           shift, and go to state 36
    OP_PAR          shift, and go to state 37

    expr     go to state 113
    l_value  go to state 57
    r_value  go to state 42
    call     go to state 58
    unop     go to state 44


State 78

   79 r_value: expr GT . expr

    AT              shift, and go to state 20
    NOT             shift, and go to state 23
    RESULT          shift, and go to state 24
    IDENTIFIER      shift, and go to state 55
    INT_CONST       shift, and go to state 28
    REAL_CONST      shift, and go to state 29
    CHAR_CONST      shift, and go to state 30
    STRING_LITERAL  shift, and go to state 31
    TRUE            shift, and go to state 32
    FALSE           shift, and go to state 33
    NIL             shift, and go to state 34
    PLUS            shift, and go to state 35
    MINUS           shift, and go to state 36
    OP_PAR          shift, and go to state 37

    expr     go to state 114
    l_value  go to state 57
    r_value  go to state 42
    call     go to state 58
    unop     go to state 44


State 79

   77 r_value: expr LT . expr

    AT              shift, and go to state 20
    NOT             shift, and go to state 23
    RESULT          shift, and go to state 24
    IDENTIFIER      shift, and go to state 55
    INT_CONST       shift, and go to state 28
    REAL_CONST      shift, and go to state 29
    CHAR_CONST      shift, and go to state 30
    STRING_LITERAL  shift, and go to state 31
    TRUE            shift, and go to state 32
    FALSE           shift, and go to state 33
    NIL             shift, and go to state 34
    PLUS            shift, and go to state 35
    MINUS           shift, and go to state 36
    OP_PAR          shift, and go to state 37

    expr     go to state 115
    l_value  go to state 57
    r_value  go to state 42
    call     go to state 58
    unop     go to state 44


State 80

   80 r_value: expr GE . expr

    AT              shift, and go to state 20
    NOT             shift, and go to state 23
    RESULT          shift, and go to state 24
    IDENTIFIER      shift, and go to state 55
    INT_CONST       shift, and go to state 28
    REAL_CONST      shift, and go to state 29
    CHAR_CONST      shift, and go to state 30
    STRING_LITERAL  shift, and go to state 31
    TRUE            shift, and go to state 32
    FALSE           shift, and go to state 33
    NIL             shift, and go to state 34
    PLUS            shift, and go to state 35
    MINUS           shift, and go to state 36
    OP_PAR          shift, and go to state 37

    expr     go to state 116
    l_value  go to state 57
    r_value  go to state 42
    call     go to state 58
    unop     go to state 44


State 81

   78 r_value: expr LE . expr

    AT              shift, and go to state 20
    NOT             shift, and go to state 23
    RESULT          shift, and go to state 24
    IDENTIFIER      shift, and go to state 55
    INT_CONST       shift, and go to state 28
    REAL_CONST      shift, and go to state 29
    CHAR_CONST      shift, and go to state 30
    STRING_LITERAL  shift, and go to state 31
    TRUE            shift, and go to state 32
    FALSE           shift, and go to state 33
    NIL             shift, and go to state 34
    PLUS            shift, and go to state 35
    MINUS           shift, and go to state 36
    OP_PAR          shift, and go to state 37

    expr     go to state 117
    l_value  go to state 57
    r_value  go to state 42
    call     go to state 58
    unop     go to state 44


State 82

   34 stmt: l_value ASSIGN . expr

    AT              shift, and go to state 20
    NOT             shift, and go to state 23
    RESULT          shift, and go to state 24
    IDENTIFIER      shift, and go to state 55
    INT_CONST       shift, and go to state 28
    REAL_CONST      shift, and go to state 29
    CHAR_CONST      shift, and go to state 30
    STRING_LITERAL  shift, and go to state 31
    TRUE            shift, and go to state 32
    FALSE           shift, and go to state 33
    NIL             shift, and go to state 34
    PLUS            shift, and go to state 35
    MINUS           shift, and go to state 36
    OP_PAR          shift, and go to state 37

    expr     go to state 118
    l_value  go to state 57
    r_value  go to state 42
    call     go to state 58
    unop     go to state 44


State 83

   54 l_value: l_value OP_BRACK . expr CLOS_BRACK

    AT              shift, and go to state 20
    NOT             shift, and go to state 23
    RESULT          shift, and go to state 24
    IDENTIFIER      shift, and go to state 55
    INT_CONST       shift, and go to state 28
    REAL_CONST      shift, and go to state 29
    CHAR_CONST      shift, and go to state 30
    STRING_LITERAL  shift, and go to state 31
    TRUE            shift, and go to state 32
    FALSE           shift, and go to state 33
    NIL             shift, and go to state 34
    PLUS            shift, and go to state 35
    MINUS           shift, and go to state 36
    OP_PAR          shift, and go to state 37

    expr     go to state 119
    l_value  go to state 57
    r_value  go to state 42
    call     go to state 58
    unop     go to state 44


State 84

   55 l_value: expr . CARET
   66 r_value: unop expr .
   67        | expr . PLUS expr
   68        | expr . MINUS expr
   69        | expr . MUL expr
   70        | expr . DIV expr
   71        | expr . INT_DIV expr
   72        | expr . MOD expr
   73        | expr . OR expr
   74        | expr . AND expr
   75        | expr . EQUAL expr
   76        | expr . NOT_EQUAL expr
   77        | expr . LT expr
   78        | expr . LE expr
   79        | expr . GT expr
   80        | expr . GE expr

    CARET  error (nonassociative)

    $default  reduce using rule 66 (r_value)


State 85

    8 local: FORWARD header SEMI_COLON .

    $default  reduce using rule 8 (local)


State 86

   14 header: FUNCTION IDENTIFIER OP_PAR . optional_arguments CLOS_PAR COLON type

    VAR  shift, and go to state 120

    IDENTIFIER  reduce using rule 21 (optional_var)
    $default    reduce using rule 16 (optional_arguments)

    optional_arguments  go to state 121
    formal              go to state 122
    optional_var        go to state 123


State 87

   13 header: PROCEDURE IDENTIFIER OP_PAR . optional_arguments CLOS_PAR

    VAR  shift, and go to state 120

    IDENTIFIER  reduce using rule 21 (optional_var)
    $default    reduce using rule 16 (optional_arguments)

    optional_arguments  go to state 124
    formal              go to state 122
    optional_var        go to state 123


State 88

    5 local: VAR IDENTIFIER next_id . COLON type SEMI_COLON next_var
   11 next_id: next_id . COMMA IDENTIFIER

    COLON  shift, and go to state 125
    COMMA  shift, and go to state 126


State 89

    6 local: LABEL IDENTIFIER next_id . SEMI_COLON
   11 next_id: next_id . COMMA IDENTIFIER

    SEMI_COLON  shift, and go to state 127
    COMMA       shift, and go to state 126


State 90

    7 local: header SEMI_COLON body . SEMI_COLON

    SEMI_COLON  shift, and go to state 128


State 91

   47 optional_bracket: OP_BRACK CLOS_BRACK .

    $default  reduce using rule 47 (optional_bracket)


State 92

   44 stmt: DISPOSE optional_bracket l_value .
   49 expr: l_value .
   54 l_value: l_value . OP_BRACK expr CLOS_BRACK

    OP_BRACK  shift, and go to state 83

    END         reduce using rule 44 (stmt)
    ELSE        reduce using rule 44 (stmt)
    SEMI_COLON  reduce using rule 44 (stmt)
    $default    reduce using rule 49 (expr)


State 93

   45 optional_expr: OP_BRACK expr . CLOS_BRACK
   55 l_value: expr . CARET
   67 r_value: expr . PLUS expr
   68        | expr . MINUS expr
   69        | expr . MUL expr
   70        | expr . DIV expr
   71        | expr . INT_DIV expr
   72        | expr . MOD expr
   73        | expr . OR expr
   74        | expr . AND expr
   75        | expr . EQUAL expr
   76        | expr . NOT_EQUAL expr
   77        | expr . LT expr
   78        | expr . LE expr
   79        | expr . GT expr
   80        | expr . GE expr

    CARET       shift, and go to state 67
    AND         shift, and go to state 68
    OR          shift, and go to state 69
    PLUS        shift, and go to state 70
    MINUS       shift, and go to state 71
    MUL         shift, and go to state 72
    DIV         shift, and go to state 73
    INT_DIV     shift, and go to state 74
    MOD         shift, and go to state 75
    EQUAL       shift, and go to state 76
    NOT_EQUAL   shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    GE          shift, and go to state 80
    LE          shift, and go to state 81
    CLOS_BRACK  shift, and go to state 129


State 94

   43 stmt: NEW optional_expr l_value .
   49 expr: l_value .
   54 l_value: l_value . OP_BRACK expr CLOS_BRACK

    OP_BRACK  shift, and go to state 83

    END         reduce using rule 43 (stmt)
    ELSE        reduce using rule 43 (stmt)
    SEMI_COLON  reduce using rule 43 (stmt)
    $default    reduce using rule 49 (expr)


State 95

   37 stmt: IF expr THEN . stmt
   38     | IF expr THEN . stmt ELSE stmt

    DISPOSE         shift, and go to state 18
    NEW             shift, and go to state 19
    AT              shift, and go to state 20
    BEGIN_ST        shift, and go to state 9
    IF              shift, and go to state 21
    WHILE           shift, and go to state 22
    NOT             shift, and go to state 23
    RESULT          shift, and go to state 24
    RETURN          shift, and go to state 25
    GOTO            shift, and go to state 26
    IDENTIFIER      shift, and go to state 27
    INT_CONST       shift, and go to state 28
    REAL_CONST      shift, and go to state 29
    CHAR_CONST      shift, and go to state 30
    STRING_LITERAL  shift, and go to state 31
    TRUE            shift, and go to state 32
    FALSE           shift, and go to state 33
    NIL             shift, and go to state 34
    PLUS            shift, and go to state 35
    MINUS           shift, and go to state 36
    OP_PAR          shift, and go to state 37

    $default  reduce using rule 33 (stmt)

    block    go to state 38
    stmt     go to state 130
    expr     go to state 40
    l_value  go to state 41
    r_value  go to state 42
    call     go to state 43
    unop     go to state 44


State 96

   39 stmt: WHILE expr DO . stmt

    DISPOSE         shift, and go to state 18
    NEW             shift, and go to state 19
    AT              shift, and go to state 20
    BEGIN_ST        shift, and go to state 9
    IF              shift, and go to state 21
    WHILE           shift, and go to state 22
    NOT             shift, and go to state 23
    RESULT          shift, and go to state 24
    RETURN          shift, and go to state 25
    GOTO            shift, and go to state 26
    IDENTIFIER      shift, and go to state 27
    INT_CONST       shift, and go to state 28
    REAL_CONST      shift, and go to state 29
    CHAR_CONST      shift, and go to state 30
    STRING_LITERAL  shift, and go to state 31
    TRUE            shift, and go to state 32
    FALSE           shift, and go to state 33
    NIL             shift, and go to state 34
    PLUS            shift, and go to state 35
    MINUS           shift, and go to state 36
    OP_PAR          shift, and go to state 37

    $default  reduce using rule 33 (stmt)

    block    go to state 38
    stmt     go to state 131
    expr     go to state 40
    l_value  go to state 41
    r_value  go to state 42
    call     go to state 43
    unop     go to state 44


State 97

   40 stmt: IDENTIFIER COLON stmt .

    $default  reduce using rule 40 (stmt)


State 98

   82 optional_parameters: IDENTIFIER . OP_PAR expr next_expr CLOS_PAR

    OP_PAR  shift, and go to state 132


State 99

   81 call: IDENTIFIER OP_PAR optional_parameters . CLOS_PAR

    CLOS_PAR  shift, and go to state 133


State 100

   56 l_value: OP_PAR l_value CLOS_PAR .

    $default  reduce using rule 56 (l_value)


State 101

   63 r_value: OP_PAR r_value CLOS_PAR .

    $default  reduce using rule 63 (r_value)


State 102

   30 block: BEGIN_ST stmt next_stmt END .

    $default  reduce using rule 30 (block)


State 103

   31 next_stmt: next_stmt SEMI_COLON . stmt

    DISPOSE         shift, and go to state 18
    NEW             shift, and go to state 19
    AT              shift, and go to state 20
    BEGIN_ST        shift, and go to state 9
    IF              shift, and go to state 21
    WHILE           shift, and go to state 22
    NOT             shift, and go to state 23
    RESULT          shift, and go to state 24
    RETURN          shift, and go to state 25
    GOTO            shift, and go to state 26
    IDENTIFIER      shift, and go to state 27
    INT_CONST       shift, and go to state 28
    REAL_CONST      shift, and go to state 29
    CHAR_CONST      shift, and go to state 30
    STRING_LITERAL  shift, and go to state 31
    TRUE            shift, and go to state 32
    FALSE           shift, and go to state 33
    NIL             shift, and go to state 34
    PLUS            shift, and go to state 35
    MINUS           shift, and go to state 36
    OP_PAR          shift, and go to state 37

    $default  reduce using rule 33 (stmt)

    block    go to state 38
    stmt     go to state 134
    expr     go to state 40
    l_value  go to state 41
    r_value  go to state 42
    call     go to state 43
    unop     go to state 44


State 104

   55 l_value: expr . CARET
   67 r_value: expr . PLUS expr
   68        | expr . MINUS expr
   69        | expr . MUL expr
   70        | expr . DIV expr
   71        | expr . INT_DIV expr
   72        | expr . MOD expr
   73        | expr . OR expr
   74        | expr . AND expr
   74        | expr AND expr .
   75        | expr . EQUAL expr
   76        | expr . NOT_EQUAL expr
   77        | expr . LT expr
   78        | expr . LE expr
   79        | expr . GT expr
   80        | expr . GE expr

    CARET  shift, and go to state 67

    $default  reduce using rule 74 (r_value)


State 105

   55 l_value: expr . CARET
   67 r_value: expr . PLUS expr
   68        | expr . MINUS expr
   69        | expr . MUL expr
   70        | expr . DIV expr
   71        | expr . INT_DIV expr
   72        | expr . MOD expr
   73        | expr . OR expr
   73        | expr OR expr .
   74        | expr . AND expr
   75        | expr . EQUAL expr
   76        | expr . NOT_EQUAL expr
   77        | expr . LT expr
   78        | expr . LE expr
   79        | expr . GT expr
   80        | expr . GE expr

    CARET    shift, and go to state 67
    AND      shift, and go to state 68
    MUL      shift, and go to state 72
    DIV      shift, and go to state 73
    INT_DIV  shift, and go to state 74
    MOD      shift, and go to state 75

    $default  reduce using rule 73 (r_value)


State 106

   55 l_value: expr . CARET
   67 r_value: expr . PLUS expr
   67        | expr PLUS expr .
   68        | expr . MINUS expr
   69        | expr . MUL expr
   70        | expr . DIV expr
   71        | expr . INT_DIV expr
   72        | expr . MOD expr
   73        | expr . OR expr
   74        | expr . AND expr
   75        | expr . EQUAL expr
   76        | expr . NOT_EQUAL expr
   77        | expr . LT expr
   78        | expr . LE expr
   79        | expr . GT expr
   80        | expr . GE expr

    CARET    shift, and go to state 67
    AND      shift, and go to state 68
    MUL      shift, and go to state 72
    DIV      shift, and go to state 73
    INT_DIV  shift, and go to state 74
    MOD      shift, and go to state 75

    $default  reduce using rule 67 (r_value)


State 107

   55 l_value: expr . CARET
   67 r_value: expr . PLUS expr
   68        | expr . MINUS expr
   68        | expr MINUS expr .
   69        | expr . MUL expr
   70        | expr . DIV expr
   71        | expr . INT_DIV expr
   72        | expr . MOD expr
   73        | expr . OR expr
   74        | expr . AND expr
   75        | expr . EQUAL expr
   76        | expr . NOT_EQUAL expr
   77        | expr . LT expr
   78        | expr . LE expr
   79        | expr . GT expr
   80        | expr . GE expr

    CARET    shift, and go to state 67
    AND      shift, and go to state 68
    MUL      shift, and go to state 72
    DIV      shift, and go to state 73
    INT_DIV  shift, and go to state 74
    MOD      shift, and go to state 75

    $default  reduce using rule 68 (r_value)


State 108

   55 l_value: expr . CARET
   67 r_value: expr . PLUS expr
   68        | expr . MINUS expr
   69        | expr . MUL expr
   69        | expr MUL expr .
   70        | expr . DIV expr
   71        | expr . INT_DIV expr
   72        | expr . MOD expr
   73        | expr . OR expr
   74        | expr . AND expr
   75        | expr . EQUAL expr
   76        | expr . NOT_EQUAL expr
   77        | expr . LT expr
   78        | expr . LE expr
   79        | expr . GT expr
   80        | expr . GE expr

    CARET  shift, and go to state 67

    $default  reduce using rule 69 (r_value)


State 109

   55 l_value: expr . CARET
   67 r_value: expr . PLUS expr
   68        | expr . MINUS expr
   69        | expr . MUL expr
   70        | expr . DIV expr
   70        | expr DIV expr .
   71        | expr . INT_DIV expr
   72        | expr . MOD expr
   73        | expr . OR expr
   74        | expr . AND expr
   75        | expr . EQUAL expr
   76        | expr . NOT_EQUAL expr
   77        | expr . LT expr
   78        | expr . LE expr
   79        | expr . GT expr
   80        | expr . GE expr

    CARET  shift, and go to state 67

    $default  reduce using rule 70 (r_value)


State 110

   55 l_value: expr . CARET
   67 r_value: expr . PLUS expr
   68        | expr . MINUS expr
   69        | expr . MUL expr
   70        | expr . DIV expr
   71        | expr . INT_DIV expr
   71        | expr INT_DIV expr .
   72        | expr . MOD expr
   73        | expr . OR expr
   74        | expr . AND expr
   75        | expr . EQUAL expr
   76        | expr . NOT_EQUAL expr
   77        | expr . LT expr
   78        | expr . LE expr
   79        | expr . GT expr
   80        | expr . GE expr

    CARET  shift, and go to state 67

    $default  reduce using rule 71 (r_value)


State 111

   55 l_value: expr . CARET
   67 r_value: expr . PLUS expr
   68        | expr . MINUS expr
   69        | expr . MUL expr
   70        | expr . DIV expr
   71        | expr . INT_DIV expr
   72        | expr . MOD expr
   72        | expr MOD expr .
   73        | expr . OR expr
   74        | expr . AND expr
   75        | expr . EQUAL expr
   76        | expr . NOT_EQUAL expr
   77        | expr . LT expr
   78        | expr . LE expr
   79        | expr . GT expr
   80        | expr . GE expr

    CARET  shift, and go to state 67

    $default  reduce using rule 72 (r_value)


State 112

   55 l_value: expr . CARET
   67 r_value: expr . PLUS expr
   68        | expr . MINUS expr
   69        | expr . MUL expr
   70        | expr . DIV expr
   71        | expr . INT_DIV expr
   72        | expr . MOD expr
   73        | expr . OR expr
   74        | expr . AND expr
   75        | expr . EQUAL expr
   75        | expr EQUAL expr .
   76        | expr . NOT_EQUAL expr
   77        | expr . LT expr
   78        | expr . LE expr
   79        | expr . GT expr
   80        | expr . GE expr

    CARET    shift, and go to state 67
    AND      shift, and go to state 68
    OR       shift, and go to state 69
    PLUS     shift, and go to state 70
    MINUS    shift, and go to state 71
    MUL      shift, and go to state 72
    DIV      shift, and go to state 73
    INT_DIV  shift, and go to state 74
    MOD      shift, and go to state 75

    $default  reduce using rule 75 (r_value)


State 113

   55 l_value: expr . CARET
   67 r_value: expr . PLUS expr
   68        | expr . MINUS expr
   69        | expr . MUL expr
   70        | expr . DIV expr
   71        | expr . INT_DIV expr
   72        | expr . MOD expr
   73        | expr . OR expr
   74        | expr . AND expr
   75        | expr . EQUAL expr
   76        | expr . NOT_EQUAL expr
   76        | expr NOT_EQUAL expr .
   77        | expr . LT expr
   78        | expr . LE expr
   79        | expr . GT expr
   80        | expr . GE expr

    CARET    shift, and go to state 67
    AND      shift, and go to state 68
    OR       shift, and go to state 69
    PLUS     shift, and go to state 70
    MINUS    shift, and go to state 71
    MUL      shift, and go to state 72
    DIV      shift, and go to state 73
    INT_DIV  shift, and go to state 74
    MOD      shift, and go to state 75

    $default  reduce using rule 76 (r_value)


State 114

   55 l_value: expr . CARET
   67 r_value: expr . PLUS expr
   68        | expr . MINUS expr
   69        | expr . MUL expr
   70        | expr . DIV expr
   71        | expr . INT_DIV expr
   72        | expr . MOD expr
   73        | expr . OR expr
   74        | expr . AND expr
   75        | expr . EQUAL expr
   76        | expr . NOT_EQUAL expr
   77        | expr . LT expr
   78        | expr . LE expr
   79        | expr . GT expr
   79        | expr GT expr .
   80        | expr . GE expr

    CARET    shift, and go to state 67
    AND      shift, and go to state 68
    OR       shift, and go to state 69
    PLUS     shift, and go to state 70
    MINUS    shift, and go to state 71
    MUL      shift, and go to state 72
    DIV      shift, and go to state 73
    INT_DIV  shift, and go to state 74
    MOD      shift, and go to state 75

    $default  reduce using rule 79 (r_value)


State 115

   55 l_value: expr . CARET
   67 r_value: expr . PLUS expr
   68        | expr . MINUS expr
   69        | expr . MUL expr
   70        | expr . DIV expr
   71        | expr . INT_DIV expr
   72        | expr . MOD expr
   73        | expr . OR expr
   74        | expr . AND expr
   75        | expr . EQUAL expr
   76        | expr . NOT_EQUAL expr
   77        | expr . LT expr
   77        | expr LT expr .
   78        | expr . LE expr
   79        | expr . GT expr
   80        | expr . GE expr

    CARET    shift, and go to state 67
    AND      shift, and go to state 68
    OR       shift, and go to state 69
    PLUS     shift, and go to state 70
    MINUS    shift, and go to state 71
    MUL      shift, and go to state 72
    DIV      shift, and go to state 73
    INT_DIV  shift, and go to state 74
    MOD      shift, and go to state 75

    $default  reduce using rule 77 (r_value)


State 116

   55 l_value: expr . CARET
   67 r_value: expr . PLUS expr
   68        | expr . MINUS expr
   69        | expr . MUL expr
   70        | expr . DIV expr
   71        | expr . INT_DIV expr
   72        | expr . MOD expr
   73        | expr . OR expr
   74        | expr . AND expr
   75        | expr . EQUAL expr
   76        | expr . NOT_EQUAL expr
   77        | expr . LT expr
   78        | expr . LE expr
   79        | expr . GT expr
   80        | expr . GE expr
   80        | expr GE expr .

    CARET    shift, and go to state 67
    AND      shift, and go to state 68
    OR       shift, and go to state 69
    PLUS     shift, and go to state 70
    MINUS    shift, and go to state 71
    MUL      shift, and go to state 72
    DIV      shift, and go to state 73
    INT_DIV  shift, and go to state 74
    MOD      shift, and go to state 75

    $default  reduce using rule 80 (r_value)


State 117

   55 l_value: expr . CARET
   67 r_value: expr . PLUS expr
   68        | expr . MINUS expr
   69        | expr . MUL expr
   70        | expr . DIV expr
   71        | expr . INT_DIV expr
   72        | expr . MOD expr
   73        | expr . OR expr
   74        | expr . AND expr
   75        | expr . EQUAL expr
   76        | expr . NOT_EQUAL expr
   77        | expr . LT expr
   78        | expr . LE expr
   78        | expr LE expr .
   79        | expr . GT expr
   80        | expr . GE expr

    CARET    shift, and go to state 67
    AND      shift, and go to state 68
    OR       shift, and go to state 69
    PLUS     shift, and go to state 70
    MINUS    shift, and go to state 71
    MUL      shift, and go to state 72
    DIV      shift, and go to state 73
    INT_DIV  shift, and go to state 74
    MOD      shift, and go to state 75

    $default  reduce using rule 78 (r_value)


State 118

   34 stmt: l_value ASSIGN expr .
   55 l_value: expr . CARET
   67 r_value: expr . PLUS expr
   68        | expr . MINUS expr
   69        | expr . MUL expr
   70        | expr . DIV expr
   71        | expr . INT_DIV expr
   72        | expr . MOD expr
   73        | expr . OR expr
   74        | expr . AND expr
   75        | expr . EQUAL expr
   76        | expr . NOT_EQUAL expr
   77        | expr . LT expr
   78        | expr . LE expr
   79        | expr . GT expr
   80        | expr . GE expr

    CARET      shift, and go to state 67
    AND        shift, and go to state 68
    OR         shift, and go to state 69
    PLUS       shift, and go to state 70
    MINUS      shift, and go to state 71
    MUL        shift, and go to state 72
    DIV        shift, and go to state 73
    INT_DIV    shift, and go to state 74
    MOD        shift, and go to state 75
    EQUAL      shift, and go to state 76
    NOT_EQUAL  shift, and go to state 77
    GT         shift, and go to state 78
    LT         shift, and go to state 79
    GE         shift, and go to state 80
    LE         shift, and go to state 81

    $default  reduce using rule 34 (stmt)


State 119

   54 l_value: l_value OP_BRACK expr . CLOS_BRACK
   55        | expr . CARET
   67 r_value: expr . PLUS expr
   68        | expr . MINUS expr
   69        | expr . MUL expr
   70        | expr . DIV expr
   71        | expr . INT_DIV expr
   72        | expr . MOD expr
   73        | expr . OR expr
   74        | expr . AND expr
   75        | expr . EQUAL expr
   76        | expr . NOT_EQUAL expr
   77        | expr . LT expr
   78        | expr . LE expr
   79        | expr . GT expr
   80        | expr . GE expr

    CARET       shift, and go to state 67
    AND         shift, and go to state 68
    OR          shift, and go to state 69
    PLUS        shift, and go to state 70
    MINUS       shift, and go to state 71
    MUL         shift, and go to state 72
    DIV         shift, and go to state 73
    INT_DIV     shift, and go to state 74
    MOD         shift, and go to state 75
    EQUAL       shift, and go to state 76
    NOT_EQUAL   shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    GE          shift, and go to state 80
    LE          shift, and go to state 81
    CLOS_BRACK  shift, and go to state 135


State 120

   20 optional_var: VAR .

    $default  reduce using rule 20 (optional_var)


State 121

   14 header: FUNCTION IDENTIFIER OP_PAR optional_arguments . CLOS_PAR COLON type

    CLOS_PAR  shift, and go to state 136


State 122

   15 optional_arguments: formal . next_arg

    $default  reduce using rule 18 (next_arg)

    next_arg  go to state 137


State 123

   19 formal: optional_var . IDENTIFIER next_id COLON type

    IDENTIFIER  shift, and go to state 138


State 124

   13 header: PROCEDURE IDENTIFIER OP_PAR optional_arguments . CLOS_PAR

    CLOS_PAR  shift, and go to state 139


State 125

    5 local: VAR IDENTIFIER next_id COLON . type SEMI_COLON next_var

    ARRAY    shift, and go to state 140
    CARET    shift, and go to state 141
    BOOLEAN  shift, and go to state 142
    CHAR     shift, and go to state 143
    INTEGER  shift, and go to state 144
    REAL     shift, and go to state 145

    type  go to state 146


State 126

   11 next_id: next_id COMMA . IDENTIFIER

    IDENTIFIER  shift, and go to state 147


State 127

    6 local: LABEL IDENTIFIER next_id SEMI_COLON .

    $default  reduce using rule 6 (local)


State 128

    7 local: header SEMI_COLON body SEMI_COLON .

    $default  reduce using rule 7 (local)


State 129

   45 optional_expr: OP_BRACK expr CLOS_BRACK .

    $default  reduce using rule 45 (optional_expr)


State 130

   37 stmt: IF expr THEN stmt .
   38     | IF expr THEN stmt . ELSE stmt

    ELSE  shift, and go to state 148

    ELSE      [reduce using rule 37 (stmt)]
    $default  reduce using rule 37 (stmt)


State 131

   39 stmt: WHILE expr DO stmt .

    $default  reduce using rule 39 (stmt)


State 132

   82 optional_parameters: IDENTIFIER OP_PAR . expr next_expr CLOS_PAR

    AT              shift, and go to state 20
    NOT             shift, and go to state 23
    RESULT          shift, and go to state 24
    IDENTIFIER      shift, and go to state 55
    INT_CONST       shift, and go to state 28
    REAL_CONST      shift, and go to state 29
    CHAR_CONST      shift, and go to state 30
    STRING_LITERAL  shift, and go to state 31
    TRUE            shift, and go to state 32
    FALSE           shift, and go to state 33
    NIL             shift, and go to state 34
    PLUS            shift, and go to state 35
    MINUS           shift, and go to state 36
    OP_PAR          shift, and go to state 37

    expr     go to state 149
    l_value  go to state 57
    r_value  go to state 42
    call     go to state 58
    unop     go to state 44


State 133

   81 call: IDENTIFIER OP_PAR optional_parameters CLOS_PAR .

    $default  reduce using rule 81 (call)


State 134

   31 next_stmt: next_stmt SEMI_COLON stmt .

    $default  reduce using rule 31 (next_stmt)


State 135

   54 l_value: l_value OP_BRACK expr CLOS_BRACK .

    $default  reduce using rule 54 (l_value)


State 136

   14 header: FUNCTION IDENTIFIER OP_PAR optional_arguments CLOS_PAR . COLON type

    COLON  shift, and go to state 150


State 137

   15 optional_arguments: formal next_arg .
   17 next_arg: next_arg . SEMI_COLON formal

    SEMI_COLON  shift, and go to state 151

    $default  reduce using rule 15 (optional_arguments)


State 138

   19 formal: optional_var IDENTIFIER . next_id COLON type

    $default  reduce using rule 12 (next_id)

    next_id  go to state 152


State 139

   13 header: PROCEDURE IDENTIFIER OP_PAR optional_arguments CLOS_PAR .

    $default  reduce using rule 13 (header)


State 140

   26 type: ARRAY . optional_size OF type

    OP_BRACK  shift, and go to state 153

    $default  reduce using rule 29 (optional_size)

    optional_size  go to state 154


State 141

   27 type: CARET . type

    ARRAY    shift, and go to state 140
    CARET    shift, and go to state 141
    BOOLEAN  shift, and go to state 142
    CHAR     shift, and go to state 143
    INTEGER  shift, and go to state 144
    REAL     shift, and go to state 145

    type  go to state 155


State 142

   24 type: BOOLEAN .

    $default  reduce using rule 24 (type)


State 143

   25 type: CHAR .

    $default  reduce using rule 25 (type)


State 144

   22 type: INTEGER .

    $default  reduce using rule 22 (type)


State 145

   23 type: REAL .

    $default  reduce using rule 23 (type)


State 146

    5 local: VAR IDENTIFIER next_id COLON type . SEMI_COLON next_var

    SEMI_COLON  shift, and go to state 156


State 147

   11 next_id: next_id COMMA IDENTIFIER .

    $default  reduce using rule 11 (next_id)


State 148

   38 stmt: IF expr THEN stmt ELSE . stmt

    DISPOSE         shift, and go to state 18
    NEW             shift, and go to state 19
    AT              shift, and go to state 20
    BEGIN_ST        shift, and go to state 9
    IF              shift, and go to state 21
    WHILE           shift, and go to state 22
    NOT             shift, and go to state 23
    RESULT          shift, and go to state 24
    RETURN          shift, and go to state 25
    GOTO            shift, and go to state 26
    IDENTIFIER      shift, and go to state 27
    INT_CONST       shift, and go to state 28
    REAL_CONST      shift, and go to state 29
    CHAR_CONST      shift, and go to state 30
    STRING_LITERAL  shift, and go to state 31
    TRUE            shift, and go to state 32
    FALSE           shift, and go to state 33
    NIL             shift, and go to state 34
    PLUS            shift, and go to state 35
    MINUS           shift, and go to state 36
    OP_PAR          shift, and go to state 37

    $default  reduce using rule 33 (stmt)

    block    go to state 38
    stmt     go to state 157
    expr     go to state 40
    l_value  go to state 41
    r_value  go to state 42
    call     go to state 43
    unop     go to state 44


State 149

   55 l_value: expr . CARET
   67 r_value: expr . PLUS expr
   68        | expr . MINUS expr
   69        | expr . MUL expr
   70        | expr . DIV expr
   71        | expr . INT_DIV expr
   72        | expr . MOD expr
   73        | expr . OR expr
   74        | expr . AND expr
   75        | expr . EQUAL expr
   76        | expr . NOT_EQUAL expr
   77        | expr . LT expr
   78        | expr . LE expr
   79        | expr . GT expr
   80        | expr . GE expr
   82 optional_parameters: IDENTIFIER OP_PAR expr . next_expr CLOS_PAR

    CARET      shift, and go to state 67
    AND        shift, and go to state 68
    OR         shift, and go to state 69
    PLUS       shift, and go to state 70
    MINUS      shift, and go to state 71
    MUL        shift, and go to state 72
    DIV        shift, and go to state 73
    INT_DIV    shift, and go to state 74
    MOD        shift, and go to state 75
    EQUAL      shift, and go to state 76
    NOT_EQUAL  shift, and go to state 77
    GT         shift, and go to state 78
    LT         shift, and go to state 79
    GE         shift, and go to state 80
    LE         shift, and go to state 81

    $default  reduce using rule 85 (next_expr)

    next_expr  go to state 158


State 150

   14 header: FUNCTION IDENTIFIER OP_PAR optional_arguments CLOS_PAR COLON . type

    ARRAY    shift, and go to state 140
    CARET    shift, and go to state 141
    BOOLEAN  shift, and go to state 142
    CHAR     shift, and go to state 143
    INTEGER  shift, and go to state 144
    REAL     shift, and go to state 145

    type  go to state 159


State 151

   17 next_arg: next_arg SEMI_COLON . formal

    VAR  shift, and go to state 120

    $default  reduce using rule 21 (optional_var)

    formal        go to state 160
    optional_var  go to state 123


State 152

   11 next_id: next_id . COMMA IDENTIFIER
   19 formal: optional_var IDENTIFIER next_id . COLON type

    COLON  shift, and go to state 161
    COMMA  shift, and go to state 126


State 153

   28 optional_size: OP_BRACK . INT_CONST CLOS_BRACK

    INT_CONST  shift, and go to state 162


State 154

   26 type: ARRAY optional_size . OF type

    OF  shift, and go to state 163


State 155

   27 type: CARET type .

    $default  reduce using rule 27 (type)


State 156

    5 local: VAR IDENTIFIER next_id COLON type SEMI_COLON . next_var

    $default  reduce using rule 10 (next_var)

    next_var  go to state 164


State 157

   38 stmt: IF expr THEN stmt ELSE stmt .

    $default  reduce using rule 38 (stmt)


State 158

   82 optional_parameters: IDENTIFIER OP_PAR expr next_expr . CLOS_PAR
   84 next_expr: next_expr . COMMA expr

    COMMA     shift, and go to state 165
    CLOS_PAR  shift, and go to state 166


State 159

   14 header: FUNCTION IDENTIFIER OP_PAR optional_arguments CLOS_PAR COLON type .

    $default  reduce using rule 14 (header)


State 160

   17 next_arg: next_arg SEMI_COLON formal .

    $default  reduce using rule 17 (next_arg)


State 161

   19 formal: optional_var IDENTIFIER next_id COLON . type

    ARRAY    shift, and go to state 140
    CARET    shift, and go to state 141
    BOOLEAN  shift, and go to state 142
    CHAR     shift, and go to state 143
    INTEGER  shift, and go to state 144
    REAL     shift, and go to state 145

    type  go to state 167


State 162

   28 optional_size: OP_BRACK INT_CONST . CLOS_BRACK

    CLOS_BRACK  shift, and go to state 168


State 163

   26 type: ARRAY optional_size OF . type

    ARRAY    shift, and go to state 140
    CARET    shift, and go to state 141
    BOOLEAN  shift, and go to state 142
    CHAR     shift, and go to state 143
    INTEGER  shift, and go to state 144
    REAL     shift, and go to state 145

    type  go to state 169


State 164

    5 local: VAR IDENTIFIER next_id COLON type SEMI_COLON next_var .
    9 next_var: next_var . IDENTIFIER next_id COLON type SEMI_COLON

    IDENTIFIER  shift, and go to state 170

    $default  reduce using rule 5 (local)


State 165

   84 next_expr: next_expr COMMA . expr

    AT              shift, and go to state 20
    NOT             shift, and go to state 23
    RESULT          shift, and go to state 24
    IDENTIFIER      shift, and go to state 55
    INT_CONST       shift, and go to state 28
    REAL_CONST      shift, and go to state 29
    CHAR_CONST      shift, and go to state 30
    STRING_LITERAL  shift, and go to state 31
    TRUE            shift, and go to state 32
    FALSE           shift, and go to state 33
    NIL             shift, and go to state 34
    PLUS            shift, and go to state 35
    MINUS           shift, and go to state 36
    OP_PAR          shift, and go to state 37

    expr     go to state 171
    l_value  go to state 57
    r_value  go to state 42
    call     go to state 58
    unop     go to state 44


State 166

   82 optional_parameters: IDENTIFIER OP_PAR expr next_expr CLOS_PAR .

    $default  reduce using rule 82 (optional_parameters)


State 167

   19 formal: optional_var IDENTIFIER next_id COLON type .

    $default  reduce using rule 19 (formal)


State 168

   28 optional_size: OP_BRACK INT_CONST CLOS_BRACK .

    $default  reduce using rule 28 (optional_size)


State 169

   26 type: ARRAY optional_size OF type .

    $default  reduce using rule 26 (type)


State 170

    9 next_var: next_var IDENTIFIER . next_id COLON type SEMI_COLON

    $default  reduce using rule 12 (next_id)

    next_id  go to state 172


State 171

   55 l_value: expr . CARET
   67 r_value: expr . PLUS expr
   68        | expr . MINUS expr
   69        | expr . MUL expr
   70        | expr . DIV expr
   71        | expr . INT_DIV expr
   72        | expr . MOD expr
   73        | expr . OR expr
   74        | expr . AND expr
   75        | expr . EQUAL expr
   76        | expr . NOT_EQUAL expr
   77        | expr . LT expr
   78        | expr . LE expr
   79        | expr . GT expr
   80        | expr . GE expr
   84 next_expr: next_expr COMMA expr .

    CARET      shift, and go to state 67
    AND        shift, and go to state 68
    OR         shift, and go to state 69
    PLUS       shift, and go to state 70
    MINUS      shift, and go to state 71
    MUL        shift, and go to state 72
    DIV        shift, and go to state 73
    INT_DIV    shift, and go to state 74
    MOD        shift, and go to state 75
    EQUAL      shift, and go to state 76
    NOT_EQUAL  shift, and go to state 77
    GT         shift, and go to state 78
    LT         shift, and go to state 79
    GE         shift, and go to state 80
    LE         shift, and go to state 81

    $default  reduce using rule 84 (next_expr)


State 172

    9 next_var: next_var IDENTIFIER next_id . COLON type SEMI_COLON
   11 next_id: next_id . COMMA IDENTIFIER

    COLON  shift, and go to state 173
    COMMA  shift, and go to state 126


State 173

    9 next_var: next_var IDENTIFIER next_id COLON . type SEMI_COLON

    ARRAY    shift, and go to state 140
    CARET    shift, and go to state 141
    BOOLEAN  shift, and go to state 142
    CHAR     shift, and go to state 143
    INTEGER  shift, and go to state 144
    REAL     shift, and go to state 145

    type  go to state 174


State 174

    9 next_var: next_var IDENTIFIER next_id COLON type . SEMI_COLON

    SEMI_COLON  shift, and go to state 175


State 175

    9 next_var: next_var IDENTIFIER next_id COLON type SEMI_COLON .

    $default  reduce using rule 9 (next_var)
