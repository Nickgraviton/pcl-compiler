// Generated by Flexc++ V2.06.02 on Sun, 28 Apr 2019 21:36:49 +0000

#ifndef Lexer_H_INCLUDED_
#define Lexer_H_INCLUDED_

// $insert baseclass_h
#include "Lexerbase.h"


// $insert classHead
class Lexer: public LexerBase
{
    public:
        explicit Lexer(std::istream &in = std::cin,
                                std::ostream &out = std::cout);

        Lexer(std::string const &infile, std::string const &outfile);
        
        // $insert lexFunctionDecl
        int lex();

    private:
        int lex__();
        int executeAction__(size_t ruleNr);

        void print();
        void preCode();     // re-implement this function for code that must 
                            // be exec'ed before the patternmatching starts

        void postCode(PostEnum__ type);    
                            // re-implement this function for code that must 
                            // be exec'ed after the rules's actions.
};

// $insert scannerConstructors
inline Lexer::Lexer(std::istream &in, std::ostream &out)
:
    LexerBase(in, out)
{}

inline Lexer::Lexer(std::string const &infile, std::string const &outfile)
:
    LexerBase(infile, outfile)
{}

// $insert inlineLexFunction
inline int Lexer::lex()
{
    return lex__();
}

inline void Lexer::preCode() 
{
    // optionally replace by your own code
}

inline void Lexer::postCode(PostEnum__ type) 
{
    // optionally replace by your own code
}

inline void Lexer::print() 
{
    print__();
}


#endif // Lexer_H_INCLUDED_

