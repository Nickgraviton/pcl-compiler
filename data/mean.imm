; ModuleID = 'PCL program'
source_filename = "PCL program"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@0 = private unnamed_addr constant [9 x i8] c"Give n: \00", align 1
@1 = private unnamed_addr constant [9 x i8] c"Give k: \00", align 1
@2 = private unnamed_addr constant [7 x i8] c"Mean: \00", align 1
@3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

define i32 @main() {
entry:
  call void @writeString(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @0, i64 0, i64 0))
  %0 = call i32 @readInteger()
  call void @writeString(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1, i64 0, i64 0))
  %1 = call i32 @readInteger()
  br label %loop

loop:                                             ; preds = %body, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %add_int2, %body ]
  %seed.0 = phi i32 [ 65, %entry ], [ %mod_int, %body ]
  %sum.0 = phi double [ 0.000000e+00, %entry ], [ %add_real, %body ]
  %icmp_lt = icmp slt i32 %i.0, %1
  br i1 %icmp_lt, label %body, label %after

body:                                             ; preds = %loop
  %mul_int = mul i32 %seed.0, 137
  %add_int = add i32 %mul_int, 221
  %add_int1 = add i32 %add_int, %i.0
  %mod_int = srem i32 %add_int1, %0
  %sitofp = sitofp i32 %mod_int to double
  %add_real = fadd double %sum.0, %sitofp
  %add_int2 = add i32 %i.0, 1
  br label %loop

after:                                            ; preds = %loop
  %icmp_gt = icmp sgt i32 %1, 0
  br i1 %icmp_gt, label %then, label %after4

then:                                             ; preds = %after
  call void @writeString(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @2, i64 0, i64 0))
  %sitofp3 = sitofp i32 %1 to double
  %div_real = fdiv double %sum.0, %sitofp3
  call void @writeReal(double %div_real)
  call void @writeString(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0))
  br label %after4

after4:                                           ; preds = %after, %then
  ret i32 0
}

declare void @writeInteger(i32)

declare void @writeBoolean(i8)

declare void @writeChar(i8)

declare void @writeReal(double)

declare void @writeString(i8*)

declare i32 @readInteger()

declare i8 @readBoolean()

declare i8 @readChar()

declare void @readString(i32, i8*)

declare i32 @abs(i32)

declare double @fabs(double)

declare double @sqrt(double)

declare double @sin(double)

declare double @cos(double)

declare double @tan(double)

declare double @arctan(double)

declare double @exp(double)

declare double @ln(double)

declare double @pi()

declare i32 @trunc_(double)

declare i32 @round_(double)

declare i32 @ord(i8)

declare i8 @chr(i32)

declare i8* @malloc_(i64)

declare void @free(i8*)
