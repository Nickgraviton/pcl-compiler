// Generated by Bisonc++ V6.01.00 on Wed, 01 May 2019 21:08:55 +0000

// base/comment

// $insert class.ih
#include "Parser.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token is Reserved__::UNDETERMINED__, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN__ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on errTok__
// which is applied. In this errTok__ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
//      }

// base/declarations

namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum Reserved__
    {
        UNDETERMINED__   = -2,
        EOF__            = -1,
        errTok__         = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    enum StateTransition
    {
        ACCEPT__   = 0,     // `ACCEPT' TRANSITION
    };

    struct PI__     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR__     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            StateType d_type;
            int       d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
        };
    };

    // $insert staticdata
    
    enum                        // size to expand the state-stack with when
    {                           // full
        STACK_EXPANSION__ = 10
    };

// Productions Info Records:
PI__ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {318, 5}, // 1: program (PROGRAM) ->  PROGRAM IDENTIFIER SEMI_COLON body DOT
     {319, 1}, // 2: body ->  block
     {319, 2}, // 3: body ->  local body
     {321, 7}, // 4: local (VAR) ->  VAR IDENTIFIER next_id COLON type SEMI_COLON decl
     {321, 4}, // 5: local (LABEL) ->  LABEL IDENTIFIER next_id SEMI_COLON
     {321, 4}, // 6: local (SEMI_COLON) ->  header SEMI_COLON body SEMI_COLON
     {321, 3}, // 7: local (FORWARD) ->  FORWARD header SEMI_COLON
     {324, 6}, // 8: decl (IDENTIFIER) ->  IDENTIFIER next_id COLON type SEMI_COLON decl
     {324, 0}, // 9: decl ->  <empty>
     {322, 3}, // 10: next_id (COMMA) ->  COMMA IDENTIFIER next_id
     {322, 0}, // 11: next_id ->  <empty>
     {325, 5}, // 12: header (PROCEDURE) ->  PROCEDURE IDENTIFIER OP_PAR optional_arguments CLOS_PAR
     {325, 7}, // 13: header (FUNCTION) ->  FUNCTION IDENTIFIER OP_PAR optional_arguments CLOS_PAR COLON type
     {326, 2}, // 14: optional_arguments ->  formal next_arg
     {326, 0}, // 15: optional_arguments ->  <empty>
     {328, 2}, // 16: next_arg (SEMI_COLON) ->  SEMI_COLON next_arg
     {328, 0}, // 17: next_arg ->  <empty>
     {327, 5}, // 18: formal (VAR) ->  VAR IDENTIFIER next_id COLON type
     {327, 4}, // 19: formal (IDENTIFIER) ->  IDENTIFIER next_id COLON type
     {323, 1}, // 20: type (INTEGER) ->  INTEGER
     {323, 1}, // 21: type (REAL) ->  REAL
     {323, 1}, // 22: type (BOOLEAN) ->  BOOLEAN
     {323, 1}, // 23: type (CHAR) ->  CHAR
     {323, 3}, // 24: type (ARRAY) ->  ARRAY OF type
     {323, 6}, // 25: type (ARRAY) ->  ARRAY OP_BRACK INT_CONST CLOS_BRACK OF type
     {323, 2}, // 26: type (CARET) ->  CARET type
     {320, 4}, // 27: block (BEGIN) ->  BEGIN stmt next_stmt END
     {330, 3}, // 28: next_stmt (SEMI_COLON) ->  SEMI_COLON stmt next_stmt
     {330, 0}, // 29: next_stmt ->  <empty>
     {329, 0}, // 30: stmt ->  <empty>
     {329, 3}, // 31: stmt (ASSIGN) ->  l_value ASSIGN expr
     {329, 1}, // 32: stmt ->  block
     {329, 1}, // 33: stmt ->  call
     {329, 1}, // 34: stmt ->  if_stmt
     {329, 4}, // 35: stmt (WHILE) ->  WHILE expr DO stmt
     {329, 3}, // 36: stmt (IDENTIFIER) ->  IDENTIFIER COLON stmt
     {329, 2}, // 37: stmt (GOTO) ->  GOTO IDENTIFIER
     {329, 1}, // 38: stmt (RETURN) ->  RETURN
     {329, 2}, // 39: stmt (NEW) ->  NEW l_value
     {329, 5}, // 40: stmt (NEW) ->  NEW OP_BRACK expr CLOS_BRACK l_value
     {329, 2}, // 41: stmt (DISPOSE) ->  DISPOSE l_value
     {329, 4}, // 42: stmt (DISPOSE) ->  DISPOSE OP_BRACK CLOS_BRACK l_value
     {335, 0}, // 43: full_stmt ->  <empty>
     {335, 3}, // 44: full_stmt (ASSIGN) ->  l_value ASSIGN expr
     {335, 1}, // 45: full_stmt ->  block
     {335, 1}, // 46: full_stmt ->  call
     {335, 1}, // 47: full_stmt ->  full_if
     {335, 4}, // 48: full_stmt (WHILE) ->  WHILE expr DO stmt
     {335, 3}, // 49: full_stmt (IDENTIFIER) ->  IDENTIFIER COLON stmt
     {335, 2}, // 50: full_stmt (GOTO) ->  GOTO IDENTIFIER
     {335, 1}, // 51: full_stmt (RETURN) ->  RETURN
     {335, 2}, // 52: full_stmt (NEW) ->  NEW l_value
     {335, 5}, // 53: full_stmt (NEW) ->  NEW OP_BRACK expr CLOS_BRACK l_value
     {335, 2}, // 54: full_stmt (DISPOSE) ->  DISPOSE l_value
     {335, 4}, // 55: full_stmt (DISPOSE) ->  DISPOSE OP_BRACK CLOS_BRACK l_value
     {336, 6}, // 56: full_if (IF) ->  IF expr THEN full_stmt ELSE full_stmt
     {334, 6}, // 57: if_stmt (IF) ->  IF expr THEN full_stmt ELSE stmt
     {334, 4}, // 58: if_stmt (IF) ->  IF expr THEN stmt
     {332, 1}, // 59: expr ->  l_value
     {332, 1}, // 60: expr ->  r_value
     {331, 1}, // 61: l_value (IDENTIFIER) ->  IDENTIFIER
     {331, 1}, // 62: l_value (RESULT) ->  RESULT
     {331, 1}, // 63: l_value (STRING_LITERAL) ->  STRING_LITERAL
     {331, 4}, // 64: l_value (OP_BRACK) ->  l_value OP_BRACK expr CLOS_BRACK
     {331, 2}, // 65: l_value (CARET) ->  expr CARET
     {331, 3}, // 66: l_value (OP_PAR) ->  OP_PAR l_value CLOS_PAR
     {337, 1}, // 67: r_value (INT_CONST) ->  INT_CONST
     {337, 1}, // 68: r_value (TRUE) ->  TRUE
     {337, 1}, // 69: r_value (FALSE) ->  FALSE
     {337, 1}, // 70: r_value (REAL_CONST) ->  REAL_CONST
     {337, 1}, // 71: r_value (CHAR_CONST) ->  CHAR_CONST
     {337, 3}, // 72: r_value (OP_PAR) ->  OP_PAR r_value CLOS_PAR
     {337, 1}, // 73: r_value (NIL) ->  NIL
     {337, 1}, // 74: r_value ->  call
     {337, 2}, // 75: r_value (AT) ->  AT l_value
     {337, 2}, // 76: r_value (UMINUS) ->  unop expr
     {337, 3}, // 77: r_value ->  expr binop expr
     {333, 3}, // 78: call (IDENTIFIER) ->  IDENTIFIER OP_PAR CLOS_PAR
     {333, 5}, // 79: call (IDENTIFIER) ->  IDENTIFIER OP_PAR expr next_expr CLOS_PAR
     {340, 3}, // 80: next_expr (COMMA) ->  COMMA expr next_expr
     {340, 0}, // 81: next_expr ->  <empty>
     {338, 1}, // 82: unop (NOT) ->  NOT
     {338, 1}, // 83: unop (UPLUS) ->  UPLUS
     {338, 1}, // 84: unop (UMINUS) ->  UMINUS
     {339, 1}, // 85: binop (PLUS) ->  PLUS
     {339, 1}, // 86: binop (MINUS) ->  MINUS
     {339, 1}, // 87: binop (MUL) ->  MUL
     {339, 1}, // 88: binop (DIV) ->  DIV
     {339, 1}, // 89: binop (INT_DIV) ->  INT_DIV
     {339, 1}, // 90: binop (MOD) ->  MOD
     {339, 1}, // 91: binop (OR) ->  OR
     {339, 1}, // 92: binop (AND) ->  AND
     {339, 1}, // 93: binop (EQUAL) ->  EQUAL
     {339, 1}, // 94: binop (NOT_EQUAL) ->  NOT_EQUAL
     {339, 1}, // 95: binop (LT) ->  LT
     {339, 1}, // 96: binop (LE) ->  LE
     {339, 1}, // 97: binop (GT) ->  GT
     {339, 1}, // 98: binop (GE) ->  GE
     {341, 1}, // 99: program_$ ->  program
};

// State info and SR__ transitions for each state.


SR__ s_0[] =
{
    { { REQ_TOKEN}, { 3} },           
    { {       318}, { 1} }, // program
    { {       281}, { 2} }, // PROGRAM
    { {         0}, { 0} },           
};

SR__ s_1[] =
{
    { { REQ_TOKEN}, {        2} }, 
    { {     EOF__}, { ACCEPT__} }, 
    { {         0}, {        0} }, 
};

SR__ s_2[] =
{
    { { REQ_TOKEN}, { 2} },              
    { {       292}, { 3} }, // IDENTIFIER
    { {         0}, { 0} },              
};

SR__ s_3[] =
{
    { { REQ_TOKEN}, { 2} },              
    { {       286}, { 4} }, // SEMI_COLON
    { {         0}, { 0} },              
};

SR__ s_4[] =
{
    { { REQ_TOKEN}, { 11} },             
    { {       319}, {  5} }, // body     
    { {       320}, {  6} }, // block    
    { {       321}, {  7} }, // local    
    { {       264}, {  8} }, // BEGIN    
    { {       284}, {  9} }, // VAR      
    { {       290}, { 10} }, // LABEL    
    { {       325}, { 11} }, // header   
    { {       278}, { 12} }, // FORWARD  
    { {       280}, { 13} }, // PROCEDURE
    { {       279}, { 14} }, // FUNCTION 
    { {         0}, {  0} },             
};

SR__ s_5[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {       287}, { 15} }, // DOT
    { {         0}, {  0} },       
};

SR__ s_6[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -2} }, 
};

SR__ s_7[] =
{
    { { REQ_TOKEN}, { 11} },             
    { {       319}, { 16} }, // body     
    { {       320}, {  6} }, // block    
    { {       321}, {  7} }, // local    
    { {       264}, {  8} }, // BEGIN    
    { {       284}, {  9} }, // VAR      
    { {       290}, { 10} }, // LABEL    
    { {       325}, { 11} }, // header   
    { {       278}, { 12} }, // FORWARD  
    { {       280}, { 13} }, // PROCEDURE
    { {       279}, { 14} }, // FUNCTION 
    { {         0}, {  0} },             
};

SR__ s_8[] =
{
    { { REQ_DEF}, {  30} },                  
    { {     329}, {  17} }, // stmt          
    { {     331}, {  18} }, // l_value       
    { {     320}, {  19} }, // block         
    { {     333}, {  20} }, // call          
    { {     334}, {  21} }, // if_stmt       
    { {     270}, {  22} }, // WHILE         
    { {     292}, {  23} }, // IDENTIFIER    
    { {     291}, {  24} }, // GOTO          
    { {     283}, {  25} }, // RETURN        
    { {     261}, {  26} }, // NEW           
    { {     260}, {  27} }, // DISPOSE       
    { {     282}, {  28} }, // RESULT        
    { {     296}, {  29} }, // STRING_LITERAL
    { {     332}, {  30} }, // expr          
    { {     314}, {  31} }, // OP_PAR        
    { {     264}, {   8} }, // BEGIN         
    { {     267}, {  32} }, // IF            
    { {     337}, {  33} }, // r_value       
    { {     293}, {  34} }, // INT_CONST     
    { {     297}, {  35} }, // TRUE          
    { {     298}, {  36} }, // FALSE         
    { {     294}, {  37} }, // REAL_CONST    
    { {     295}, {  38} }, // CHAR_CONST    
    { {     299}, {  39} }, // NIL           
    { {     263}, {  40} }, // AT            
    { {     338}, {  41} }, // unop          
    { {     273}, {  42} }, // NOT           
    { {     307}, {  43} }, // UPLUS         
    { {     306}, {  44} }, // UMINUS        
    { {       0}, { -30} },                  
};

SR__ s_9[] =
{
    { { REQ_TOKEN}, {  2} },              
    { {       292}, { 45} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_10[] =
{
    { { REQ_TOKEN}, {  2} },              
    { {       292}, { 46} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_11[] =
{
    { { REQ_TOKEN}, {  2} },              
    { {       286}, { 47} }, // SEMI_COLON
    { {         0}, {  0} },              
};

SR__ s_12[] =
{
    { { REQ_TOKEN}, {  4} },             
    { {       325}, { 48} }, // header   
    { {       280}, { 13} }, // PROCEDURE
    { {       279}, { 14} }, // FUNCTION 
    { {         0}, {  0} },             
};

SR__ s_13[] =
{
    { { REQ_TOKEN}, {  2} },              
    { {       292}, { 49} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_14[] =
{
    { { REQ_TOKEN}, {  2} },              
    { {       292}, { 50} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_15[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -1} }, 
};

SR__ s_16[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -3} }, 
};

SR__ s_17[] =
{
    { { REQ_DEF}, {   3} },              
    { {     330}, {  51} }, // next_stmt 
    { {     286}, {  52} }, // SEMI_COLON
    { {       0}, { -29} },              
};

SR__ s_18[] =
{
    { { REQ_DEF}, {   3} },            
    { {     285}, {  53} }, // ASSIGN  
    { {     316}, {  54} }, // OP_BRACK
    { {       0}, { -59} },            
};

SR__ s_19[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -32} }, 
};

SR__ s_20[] =
{
    { { REQ_DEF}, {   4} },              
    { {     266}, { -33} }, // END       
    { {     269}, { -33} }, // ELSE      
    { {     286}, { -33} }, // SEMI_COLON
    { {       0}, { -74} },              
};

SR__ s_21[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -34} }, 
};

SR__ s_22[] =
{
    { { REQ_TOKEN}, { 20} },                  
    { {       332}, { 55} }, // expr          
    { {       331}, { 56} }, // l_value       
    { {       337}, { 33} }, // r_value       
    { {       292}, { 57} }, // IDENTIFIER    
    { {       282}, { 28} }, // RESULT        
    { {       296}, { 29} }, // STRING_LITERAL
    { {       314}, { 31} }, // OP_PAR        
    { {       293}, { 34} }, // INT_CONST     
    { {       297}, { 35} }, // TRUE          
    { {       298}, { 36} }, // FALSE         
    { {       294}, { 37} }, // REAL_CONST    
    { {       295}, { 38} }, // CHAR_CONST    
    { {       299}, { 39} }, // NIL           
    { {       333}, { 58} }, // call          
    { {       263}, { 40} }, // AT            
    { {       338}, { 41} }, // unop          
    { {       273}, { 42} }, // NOT           
    { {       307}, { 43} }, // UPLUS         
    { {       306}, { 44} }, // UMINUS        
    { {         0}, {  0} },                  
};

SR__ s_23[] =
{
    { { REQ_DEF}, {   3} },          
    { {     288}, {  59} }, // COLON 
    { {     314}, {  60} }, // OP_PAR
    { {       0}, { -61} },          
};

SR__ s_24[] =
{
    { { REQ_TOKEN}, {  2} },              
    { {       292}, { 61} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_25[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -38} }, 
};

SR__ s_26[] =
{
    { { REQ_TOKEN}, { 21} },                  
    { {       331}, { 62} }, // l_value       
    { {       316}, { 63} }, // OP_BRACK      
    { {       292}, { 57} }, // IDENTIFIER    
    { {       282}, { 28} }, // RESULT        
    { {       296}, { 29} }, // STRING_LITERAL
    { {       332}, { 30} }, // expr          
    { {       314}, { 31} }, // OP_PAR        
    { {       337}, { 33} }, // r_value       
    { {       293}, { 34} }, // INT_CONST     
    { {       297}, { 35} }, // TRUE          
    { {       298}, { 36} }, // FALSE         
    { {       294}, { 37} }, // REAL_CONST    
    { {       295}, { 38} }, // CHAR_CONST    
    { {       299}, { 39} }, // NIL           
    { {       333}, { 58} }, // call          
    { {       263}, { 40} }, // AT            
    { {       338}, { 41} }, // unop          
    { {       273}, { 42} }, // NOT           
    { {       307}, { 43} }, // UPLUS         
    { {       306}, { 44} }, // UMINUS        
    { {         0}, {  0} },                  
};

SR__ s_27[] =
{
    { { REQ_TOKEN}, { 21} },                  
    { {       331}, { 64} }, // l_value       
    { {       316}, { 65} }, // OP_BRACK      
    { {       292}, { 57} }, // IDENTIFIER    
    { {       282}, { 28} }, // RESULT        
    { {       296}, { 29} }, // STRING_LITERAL
    { {       332}, { 30} }, // expr          
    { {       314}, { 31} }, // OP_PAR        
    { {       337}, { 33} }, // r_value       
    { {       293}, { 34} }, // INT_CONST     
    { {       297}, { 35} }, // TRUE          
    { {       298}, { 36} }, // FALSE         
    { {       294}, { 37} }, // REAL_CONST    
    { {       295}, { 38} }, // CHAR_CONST    
    { {       299}, { 39} }, // NIL           
    { {       333}, { 58} }, // call          
    { {       263}, { 40} }, // AT            
    { {       338}, { 41} }, // unop          
    { {       273}, { 42} }, // NOT           
    { {       307}, { 43} }, // UPLUS         
    { {       306}, { 44} }, // UMINUS        
    { {         0}, {  0} },                  
};

SR__ s_28[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -62} }, 
};

SR__ s_29[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -63} }, 
};

SR__ s_30[] =
{
    { { REQ_TOKEN}, { 17} },             
    { {       262}, { 66} }, // CARET    
    { {       339}, { 67} }, // binop    
    { {       300}, { 68} }, // PLUS     
    { {       301}, { 69} }, // MINUS    
    { {       302}, { 70} }, // MUL      
    { {       303}, { 71} }, // DIV      
    { {       304}, { 72} }, // INT_DIV  
    { {       305}, { 73} }, // MOD      
    { {       272}, { 74} }, // OR       
    { {       271}, { 75} }, // AND      
    { {       308}, { 76} }, // EQUAL    
    { {       309}, { 77} }, // NOT_EQUAL
    { {       311}, { 78} }, // LT       
    { {       313}, { 79} }, // LE       
    { {       310}, { 80} }, // GT       
    { {       312}, { 81} }, // GE       
    { {         0}, {  0} },             
};

SR__ s_31[] =
{
    { { REQ_TOKEN}, { 20} },                  
    { {       331}, { 82} }, // l_value       
    { {       337}, { 83} }, // r_value       
    { {       292}, { 57} }, // IDENTIFIER    
    { {       282}, { 28} }, // RESULT        
    { {       296}, { 29} }, // STRING_LITERAL
    { {       332}, { 30} }, // expr          
    { {       314}, { 31} }, // OP_PAR        
    { {       293}, { 34} }, // INT_CONST     
    { {       297}, { 35} }, // TRUE          
    { {       298}, { 36} }, // FALSE         
    { {       294}, { 37} }, // REAL_CONST    
    { {       295}, { 38} }, // CHAR_CONST    
    { {       299}, { 39} }, // NIL           
    { {       333}, { 58} }, // call          
    { {       263}, { 40} }, // AT            
    { {       338}, { 41} }, // unop          
    { {       273}, { 42} }, // NOT           
    { {       307}, { 43} }, // UPLUS         
    { {       306}, { 44} }, // UMINUS        
    { {         0}, {  0} },                  
};

SR__ s_32[] =
{
    { { REQ_TOKEN}, { 20} },                  
    { {       332}, { 84} }, // expr          
    { {       331}, { 56} }, // l_value       
    { {       337}, { 33} }, // r_value       
    { {       292}, { 57} }, // IDENTIFIER    
    { {       282}, { 28} }, // RESULT        
    { {       296}, { 29} }, // STRING_LITERAL
    { {       314}, { 31} }, // OP_PAR        
    { {       293}, { 34} }, // INT_CONST     
    { {       297}, { 35} }, // TRUE          
    { {       298}, { 36} }, // FALSE         
    { {       294}, { 37} }, // REAL_CONST    
    { {       295}, { 38} }, // CHAR_CONST    
    { {       299}, { 39} }, // NIL           
    { {       333}, { 58} }, // call          
    { {       263}, { 40} }, // AT            
    { {       338}, { 41} }, // unop          
    { {       273}, { 42} }, // NOT           
    { {       307}, { 43} }, // UPLUS         
    { {       306}, { 44} }, // UMINUS        
    { {         0}, {  0} },                  
};

SR__ s_33[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -60} }, 
};

SR__ s_34[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -67} }, 
};

SR__ s_35[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -68} }, 
};

SR__ s_36[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -69} }, 
};

SR__ s_37[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -70} }, 
};

SR__ s_38[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -71} }, 
};

SR__ s_39[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -73} }, 
};

SR__ s_40[] =
{
    { { REQ_TOKEN}, { 20} },                  
    { {       331}, { 85} }, // l_value       
    { {       292}, { 57} }, // IDENTIFIER    
    { {       282}, { 28} }, // RESULT        
    { {       296}, { 29} }, // STRING_LITERAL
    { {       332}, { 30} }, // expr          
    { {       314}, { 31} }, // OP_PAR        
    { {       337}, { 33} }, // r_value       
    { {       293}, { 34} }, // INT_CONST     
    { {       297}, { 35} }, // TRUE          
    { {       298}, { 36} }, // FALSE         
    { {       294}, { 37} }, // REAL_CONST    
    { {       295}, { 38} }, // CHAR_CONST    
    { {       299}, { 39} }, // NIL           
    { {       333}, { 58} }, // call          
    { {       263}, { 40} }, // AT            
    { {       338}, { 41} }, // unop          
    { {       273}, { 42} }, // NOT           
    { {       307}, { 43} }, // UPLUS         
    { {       306}, { 44} }, // UMINUS        
    { {         0}, {  0} },                  
};

SR__ s_41[] =
{
    { { REQ_TOKEN}, { 20} },                  
    { {       332}, { 86} }, // expr          
    { {       331}, { 56} }, // l_value       
    { {       337}, { 33} }, // r_value       
    { {       292}, { 57} }, // IDENTIFIER    
    { {       282}, { 28} }, // RESULT        
    { {       296}, { 29} }, // STRING_LITERAL
    { {       314}, { 31} }, // OP_PAR        
    { {       293}, { 34} }, // INT_CONST     
    { {       297}, { 35} }, // TRUE          
    { {       298}, { 36} }, // FALSE         
    { {       294}, { 37} }, // REAL_CONST    
    { {       295}, { 38} }, // CHAR_CONST    
    { {       299}, { 39} }, // NIL           
    { {       333}, { 58} }, // call          
    { {       263}, { 40} }, // AT            
    { {       338}, { 41} }, // unop          
    { {       273}, { 42} }, // NOT           
    { {       307}, { 43} }, // UPLUS         
    { {       306}, { 44} }, // UMINUS        
    { {         0}, {  0} },                  
};

SR__ s_42[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -82} }, 
};

SR__ s_43[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -83} }, 
};

SR__ s_44[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -84} }, 
};

SR__ s_45[] =
{
    { { REQ_DEF}, {   3} },           
    { {     322}, {  87} }, // next_id
    { {     289}, {  88} }, // COMMA  
    { {       0}, { -11} },           
};

SR__ s_46[] =
{
    { { REQ_DEF}, {   3} },           
    { {     322}, {  89} }, // next_id
    { {     289}, {  88} }, // COMMA  
    { {       0}, { -11} },           
};

SR__ s_47[] =
{
    { { REQ_TOKEN}, { 11} },             
    { {       319}, { 90} }, // body     
    { {       320}, {  6} }, // block    
    { {       321}, {  7} }, // local    
    { {       264}, {  8} }, // BEGIN    
    { {       284}, {  9} }, // VAR      
    { {       290}, { 10} }, // LABEL    
    { {       325}, { 11} }, // header   
    { {       278}, { 12} }, // FORWARD  
    { {       280}, { 13} }, // PROCEDURE
    { {       279}, { 14} }, // FUNCTION 
    { {         0}, {  0} },             
};

SR__ s_48[] =
{
    { { REQ_TOKEN}, {  2} },              
    { {       286}, { 91} }, // SEMI_COLON
    { {         0}, {  0} },              
};

SR__ s_49[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       314}, { 92} }, // OP_PAR
    { {         0}, {  0} },          
};

SR__ s_50[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       314}, { 93} }, // OP_PAR
    { {         0}, {  0} },          
};

SR__ s_51[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {       266}, { 94} }, // END
    { {         0}, {  0} },       
};

SR__ s_52[] =
{
    { { REQ_DEF}, {  30} },                  
    { {     329}, {  95} }, // stmt          
    { {     331}, {  18} }, // l_value       
    { {     320}, {  19} }, // block         
    { {     333}, {  20} }, // call          
    { {     334}, {  21} }, // if_stmt       
    { {     270}, {  22} }, // WHILE         
    { {     292}, {  23} }, // IDENTIFIER    
    { {     291}, {  24} }, // GOTO          
    { {     283}, {  25} }, // RETURN        
    { {     261}, {  26} }, // NEW           
    { {     260}, {  27} }, // DISPOSE       
    { {     282}, {  28} }, // RESULT        
    { {     296}, {  29} }, // STRING_LITERAL
    { {     332}, {  30} }, // expr          
    { {     314}, {  31} }, // OP_PAR        
    { {     264}, {   8} }, // BEGIN         
    { {     267}, {  32} }, // IF            
    { {     337}, {  33} }, // r_value       
    { {     293}, {  34} }, // INT_CONST     
    { {     297}, {  35} }, // TRUE          
    { {     298}, {  36} }, // FALSE         
    { {     294}, {  37} }, // REAL_CONST    
    { {     295}, {  38} }, // CHAR_CONST    
    { {     299}, {  39} }, // NIL           
    { {     263}, {  40} }, // AT            
    { {     338}, {  41} }, // unop          
    { {     273}, {  42} }, // NOT           
    { {     307}, {  43} }, // UPLUS         
    { {     306}, {  44} }, // UMINUS        
    { {       0}, { -30} },                  
};

SR__ s_53[] =
{
    { { REQ_TOKEN}, { 20} },                  
    { {       332}, { 96} }, // expr          
    { {       331}, { 56} }, // l_value       
    { {       337}, { 33} }, // r_value       
    { {       292}, { 57} }, // IDENTIFIER    
    { {       282}, { 28} }, // RESULT        
    { {       296}, { 29} }, // STRING_LITERAL
    { {       314}, { 31} }, // OP_PAR        
    { {       293}, { 34} }, // INT_CONST     
    { {       297}, { 35} }, // TRUE          
    { {       298}, { 36} }, // FALSE         
    { {       294}, { 37} }, // REAL_CONST    
    { {       295}, { 38} }, // CHAR_CONST    
    { {       299}, { 39} }, // NIL           
    { {       333}, { 58} }, // call          
    { {       263}, { 40} }, // AT            
    { {       338}, { 41} }, // unop          
    { {       273}, { 42} }, // NOT           
    { {       307}, { 43} }, // UPLUS         
    { {       306}, { 44} }, // UMINUS        
    { {         0}, {  0} },                  
};

SR__ s_54[] =
{
    { { REQ_TOKEN}, { 20} },                  
    { {       332}, { 97} }, // expr          
    { {       331}, { 56} }, // l_value       
    { {       337}, { 33} }, // r_value       
    { {       292}, { 57} }, // IDENTIFIER    
    { {       282}, { 28} }, // RESULT        
    { {       296}, { 29} }, // STRING_LITERAL
    { {       314}, { 31} }, // OP_PAR        
    { {       293}, { 34} }, // INT_CONST     
    { {       297}, { 35} }, // TRUE          
    { {       298}, { 36} }, // FALSE         
    { {       294}, { 37} }, // REAL_CONST    
    { {       295}, { 38} }, // CHAR_CONST    
    { {       299}, { 39} }, // NIL           
    { {       333}, { 58} }, // call          
    { {       263}, { 40} }, // AT            
    { {       338}, { 41} }, // unop          
    { {       273}, { 42} }, // NOT           
    { {       307}, { 43} }, // UPLUS         
    { {       306}, { 44} }, // UMINUS        
    { {         0}, {  0} },                  
};

SR__ s_55[] =
{
    { { REQ_TOKEN}, { 18} },             
    { {       265}, { 98} }, // DO       
    { {       262}, { 66} }, // CARET    
    { {       339}, { 67} }, // binop    
    { {       300}, { 68} }, // PLUS     
    { {       301}, { 69} }, // MINUS    
    { {       302}, { 70} }, // MUL      
    { {       303}, { 71} }, // DIV      
    { {       304}, { 72} }, // INT_DIV  
    { {       305}, { 73} }, // MOD      
    { {       272}, { 74} }, // OR       
    { {       271}, { 75} }, // AND      
    { {       308}, { 76} }, // EQUAL    
    { {       309}, { 77} }, // NOT_EQUAL
    { {       311}, { 78} }, // LT       
    { {       313}, { 79} }, // LE       
    { {       310}, { 80} }, // GT       
    { {       312}, { 81} }, // GE       
    { {         0}, {  0} },             
};

SR__ s_56[] =
{
    { { REQ_DEF}, {   2} },            
    { {     316}, {  54} }, // OP_BRACK
    { {       0}, { -59} },            
};

SR__ s_57[] =
{
    { { REQ_DEF}, {   2} },          
    { {     314}, {  60} }, // OP_PAR
    { {       0}, { -61} },          
};

SR__ s_58[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -74} }, 
};

SR__ s_59[] =
{
    { { REQ_DEF}, {  30} },                  
    { {     329}, {  99} }, // stmt          
    { {     331}, {  18} }, // l_value       
    { {     320}, {  19} }, // block         
    { {     333}, {  20} }, // call          
    { {     334}, {  21} }, // if_stmt       
    { {     270}, {  22} }, // WHILE         
    { {     292}, {  23} }, // IDENTIFIER    
    { {     291}, {  24} }, // GOTO          
    { {     283}, {  25} }, // RETURN        
    { {     261}, {  26} }, // NEW           
    { {     260}, {  27} }, // DISPOSE       
    { {     282}, {  28} }, // RESULT        
    { {     296}, {  29} }, // STRING_LITERAL
    { {     332}, {  30} }, // expr          
    { {     314}, {  31} }, // OP_PAR        
    { {     264}, {   8} }, // BEGIN         
    { {     267}, {  32} }, // IF            
    { {     337}, {  33} }, // r_value       
    { {     293}, {  34} }, // INT_CONST     
    { {     297}, {  35} }, // TRUE          
    { {     298}, {  36} }, // FALSE         
    { {     294}, {  37} }, // REAL_CONST    
    { {     295}, {  38} }, // CHAR_CONST    
    { {     299}, {  39} }, // NIL           
    { {     263}, {  40} }, // AT            
    { {     338}, {  41} }, // unop          
    { {     273}, {  42} }, // NOT           
    { {     307}, {  43} }, // UPLUS         
    { {     306}, {  44} }, // UMINUS        
    { {       0}, { -30} },                  
};

SR__ s_60[] =
{
    { { REQ_TOKEN}, {  21} },                  
    { {       315}, { 100} }, // CLOS_PAR      
    { {       332}, { 101} }, // expr          
    { {       331}, {  56} }, // l_value       
    { {       337}, {  33} }, // r_value       
    { {       292}, {  57} }, // IDENTIFIER    
    { {       282}, {  28} }, // RESULT        
    { {       296}, {  29} }, // STRING_LITERAL
    { {       314}, {  31} }, // OP_PAR        
    { {       293}, {  34} }, // INT_CONST     
    { {       297}, {  35} }, // TRUE          
    { {       298}, {  36} }, // FALSE         
    { {       294}, {  37} }, // REAL_CONST    
    { {       295}, {  38} }, // CHAR_CONST    
    { {       299}, {  39} }, // NIL           
    { {       333}, {  58} }, // call          
    { {       263}, {  40} }, // AT            
    { {       338}, {  41} }, // unop          
    { {       273}, {  42} }, // NOT           
    { {       307}, {  43} }, // UPLUS         
    { {       306}, {  44} }, // UMINUS        
    { {         0}, {   0} },                  
};

SR__ s_61[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -37} }, 
};

SR__ s_62[] =
{
    { { REQ_DEF}, {   5} },              
    { {     316}, {  54} }, // OP_BRACK  
    { {     266}, { -39} }, // END       
    { {     269}, { -39} }, // ELSE      
    { {     286}, { -39} }, // SEMI_COLON
    { {       0}, { -59} },              
};

SR__ s_63[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       332}, { 102} }, // expr          
    { {       331}, {  56} }, // l_value       
    { {       337}, {  33} }, // r_value       
    { {       292}, {  57} }, // IDENTIFIER    
    { {       282}, {  28} }, // RESULT        
    { {       296}, {  29} }, // STRING_LITERAL
    { {       314}, {  31} }, // OP_PAR        
    { {       293}, {  34} }, // INT_CONST     
    { {       297}, {  35} }, // TRUE          
    { {       298}, {  36} }, // FALSE         
    { {       294}, {  37} }, // REAL_CONST    
    { {       295}, {  38} }, // CHAR_CONST    
    { {       299}, {  39} }, // NIL           
    { {       333}, {  58} }, // call          
    { {       263}, {  40} }, // AT            
    { {       338}, {  41} }, // unop          
    { {       273}, {  42} }, // NOT           
    { {       307}, {  43} }, // UPLUS         
    { {       306}, {  44} }, // UMINUS        
    { {         0}, {   0} },                  
};

SR__ s_64[] =
{
    { { REQ_DEF}, {   5} },              
    { {     316}, {  54} }, // OP_BRACK  
    { {     266}, { -41} }, // END       
    { {     269}, { -41} }, // ELSE      
    { {     286}, { -41} }, // SEMI_COLON
    { {       0}, { -59} },              
};

SR__ s_65[] =
{
    { { REQ_TOKEN}, {   2} },              
    { {       317}, { 103} }, // CLOS_BRACK
    { {         0}, {   0} },              
};

SR__ s_66[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -65} }, 
};

SR__ s_67[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       332}, { 104} }, // expr          
    { {       331}, {  56} }, // l_value       
    { {       337}, {  33} }, // r_value       
    { {       292}, {  57} }, // IDENTIFIER    
    { {       282}, {  28} }, // RESULT        
    { {       296}, {  29} }, // STRING_LITERAL
    { {       314}, {  31} }, // OP_PAR        
    { {       293}, {  34} }, // INT_CONST     
    { {       297}, {  35} }, // TRUE          
    { {       298}, {  36} }, // FALSE         
    { {       294}, {  37} }, // REAL_CONST    
    { {       295}, {  38} }, // CHAR_CONST    
    { {       299}, {  39} }, // NIL           
    { {       333}, {  58} }, // call          
    { {       263}, {  40} }, // AT            
    { {       338}, {  41} }, // unop          
    { {       273}, {  42} }, // NOT           
    { {       307}, {  43} }, // UPLUS         
    { {       306}, {  44} }, // UMINUS        
    { {         0}, {   0} },                  
};

SR__ s_68[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -85} }, 
};

SR__ s_69[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -86} }, 
};

SR__ s_70[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -87} }, 
};

SR__ s_71[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -88} }, 
};

SR__ s_72[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -89} }, 
};

SR__ s_73[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -90} }, 
};

SR__ s_74[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -91} }, 
};

SR__ s_75[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -92} }, 
};

SR__ s_76[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -93} }, 
};

SR__ s_77[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -94} }, 
};

SR__ s_78[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -95} }, 
};

SR__ s_79[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -96} }, 
};

SR__ s_80[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -97} }, 
};

SR__ s_81[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -98} }, 
};

SR__ s_82[] =
{
    { { REQ_DEF}, {   3} },            
    { {     315}, { 105} }, // CLOS_PAR
    { {     316}, {  54} }, // OP_BRACK
    { {       0}, { -59} },            
};

SR__ s_83[] =
{
    { { REQ_DEF}, {   2} },            
    { {     315}, { 106} }, // CLOS_PAR
    { {       0}, { -60} },            
};

SR__ s_84[] =
{
    { { REQ_TOKEN}, {  18} },             
    { {       268}, { 107} }, // THEN     
    { {       262}, {  66} }, // CARET    
    { {       339}, {  67} }, // binop    
    { {       300}, {  68} }, // PLUS     
    { {       301}, {  69} }, // MINUS    
    { {       302}, {  70} }, // MUL      
    { {       303}, {  71} }, // DIV      
    { {       304}, {  72} }, // INT_DIV  
    { {       305}, {  73} }, // MOD      
    { {       272}, {  74} }, // OR       
    { {       271}, {  75} }, // AND      
    { {       308}, {  76} }, // EQUAL    
    { {       309}, {  77} }, // NOT_EQUAL
    { {       311}, {  78} }, // LT       
    { {       313}, {  79} }, // LE       
    { {       310}, {  80} }, // GT       
    { {       312}, {  81} }, // GE       
    { {         0}, {   0} },             
};

SR__ s_85[] =
{
    { { REQ_DEF}, {  10} },              
    { {     316}, {  54} }, // OP_BRACK  
    { {     265}, { -75} }, // DO        
    { {     266}, { -75} }, // END       
    { {     268}, { -75} }, // THEN      
    { {     269}, { -75} }, // ELSE      
    { {     286}, { -75} }, // SEMI_COLON
    { {     289}, { -75} }, // COMMA     
    { {     315}, { -75} }, // CLOS_PAR  
    { {     317}, { -75} }, // CLOS_BRACK
    { {       0}, { -59} },              
};

SR__ s_86[] =
{
    { { REQ_DEF}, {   2} },         
    { {     339}, {  67} }, // binop
    { {       0}, { -76} },         
};

SR__ s_87[] =
{
    { { REQ_TOKEN}, {   2} },         
    { {       288}, { 108} }, // COLON
    { {         0}, {   0} },         
};

SR__ s_88[] =
{
    { { REQ_TOKEN}, {   2} },              
    { {       292}, { 109} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_89[] =
{
    { { REQ_TOKEN}, {   2} },              
    { {       286}, { 110} }, // SEMI_COLON
    { {         0}, {   0} },              
};

SR__ s_90[] =
{
    { { REQ_TOKEN}, {   2} },              
    { {       286}, { 111} }, // SEMI_COLON
    { {         0}, {   0} },              
};

SR__ s_91[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -7} }, 
};

SR__ s_92[] =
{
    { { REQ_DEF}, {   5} },                      
    { {     326}, { 112} }, // optional_arguments
    { {     327}, { 113} }, // formal            
    { {     284}, { 114} }, // VAR               
    { {     292}, { 115} }, // IDENTIFIER        
    { {       0}, { -15} },                      
};

SR__ s_93[] =
{
    { { REQ_DEF}, {   5} },                      
    { {     326}, { 116} }, // optional_arguments
    { {     327}, { 113} }, // formal            
    { {     284}, { 114} }, // VAR               
    { {     292}, { 115} }, // IDENTIFIER        
    { {       0}, { -15} },                      
};

SR__ s_94[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -27} }, 
};

SR__ s_95[] =
{
    { { REQ_DEF}, {   3} },              
    { {     330}, { 117} }, // next_stmt 
    { {     286}, {  52} }, // SEMI_COLON
    { {       0}, { -29} },              
};

SR__ s_96[] =
{
    { { REQ_DEF}, {  17} },             
    { {     262}, {  66} }, // CARET    
    { {     339}, {  67} }, // binop    
    { {     300}, {  68} }, // PLUS     
    { {     301}, {  69} }, // MINUS    
    { {     302}, {  70} }, // MUL      
    { {     303}, {  71} }, // DIV      
    { {     304}, {  72} }, // INT_DIV  
    { {     305}, {  73} }, // MOD      
    { {     272}, {  74} }, // OR       
    { {     271}, {  75} }, // AND      
    { {     308}, {  76} }, // EQUAL    
    { {     309}, {  77} }, // NOT_EQUAL
    { {     311}, {  78} }, // LT       
    { {     313}, {  79} }, // LE       
    { {     310}, {  80} }, // GT       
    { {     312}, {  81} }, // GE       
    { {       0}, { -31} },             
};

SR__ s_97[] =
{
    { { REQ_TOKEN}, {  18} },              
    { {       317}, { 118} }, // CLOS_BRACK
    { {       262}, {  66} }, // CARET     
    { {       339}, {  67} }, // binop     
    { {       300}, {  68} }, // PLUS      
    { {       301}, {  69} }, // MINUS     
    { {       302}, {  70} }, // MUL       
    { {       303}, {  71} }, // DIV       
    { {       304}, {  72} }, // INT_DIV   
    { {       305}, {  73} }, // MOD       
    { {       272}, {  74} }, // OR        
    { {       271}, {  75} }, // AND       
    { {       308}, {  76} }, // EQUAL     
    { {       309}, {  77} }, // NOT_EQUAL 
    { {       311}, {  78} }, // LT        
    { {       313}, {  79} }, // LE        
    { {       310}, {  80} }, // GT        
    { {       312}, {  81} }, // GE        
    { {         0}, {   0} },              
};

SR__ s_98[] =
{
    { { REQ_DEF}, {  30} },                  
    { {     329}, { 119} }, // stmt          
    { {     331}, {  18} }, // l_value       
    { {     320}, {  19} }, // block         
    { {     333}, {  20} }, // call          
    { {     334}, {  21} }, // if_stmt       
    { {     270}, {  22} }, // WHILE         
    { {     292}, {  23} }, // IDENTIFIER    
    { {     291}, {  24} }, // GOTO          
    { {     283}, {  25} }, // RETURN        
    { {     261}, {  26} }, // NEW           
    { {     260}, {  27} }, // DISPOSE       
    { {     282}, {  28} }, // RESULT        
    { {     296}, {  29} }, // STRING_LITERAL
    { {     332}, {  30} }, // expr          
    { {     314}, {  31} }, // OP_PAR        
    { {     264}, {   8} }, // BEGIN         
    { {     267}, {  32} }, // IF            
    { {     337}, {  33} }, // r_value       
    { {     293}, {  34} }, // INT_CONST     
    { {     297}, {  35} }, // TRUE          
    { {     298}, {  36} }, // FALSE         
    { {     294}, {  37} }, // REAL_CONST    
    { {     295}, {  38} }, // CHAR_CONST    
    { {     299}, {  39} }, // NIL           
    { {     263}, {  40} }, // AT            
    { {     338}, {  41} }, // unop          
    { {     273}, {  42} }, // NOT           
    { {     307}, {  43} }, // UPLUS         
    { {     306}, {  44} }, // UMINUS        
    { {       0}, { -30} },                  
};

SR__ s_99[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -36} }, 
};

SR__ s_100[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -78} }, 
};

SR__ s_101[] =
{
    { { REQ_DEF}, {  19} },             
    { {     340}, { 120} }, // next_expr
    { {     262}, {  66} }, // CARET    
    { {     339}, {  67} }, // binop    
    { {     289}, { 121} }, // COMMA    
    { {     300}, {  68} }, // PLUS     
    { {     301}, {  69} }, // MINUS    
    { {     302}, {  70} }, // MUL      
    { {     303}, {  71} }, // DIV      
    { {     304}, {  72} }, // INT_DIV  
    { {     305}, {  73} }, // MOD      
    { {     272}, {  74} }, // OR       
    { {     271}, {  75} }, // AND      
    { {     308}, {  76} }, // EQUAL    
    { {     309}, {  77} }, // NOT_EQUAL
    { {     311}, {  78} }, // LT       
    { {     313}, {  79} }, // LE       
    { {     310}, {  80} }, // GT       
    { {     312}, {  81} }, // GE       
    { {       0}, { -81} },             
};

SR__ s_102[] =
{
    { { REQ_TOKEN}, {  18} },              
    { {       317}, { 122} }, // CLOS_BRACK
    { {       262}, {  66} }, // CARET     
    { {       339}, {  67} }, // binop     
    { {       300}, {  68} }, // PLUS      
    { {       301}, {  69} }, // MINUS     
    { {       302}, {  70} }, // MUL       
    { {       303}, {  71} }, // DIV       
    { {       304}, {  72} }, // INT_DIV   
    { {       305}, {  73} }, // MOD       
    { {       272}, {  74} }, // OR        
    { {       271}, {  75} }, // AND       
    { {       308}, {  76} }, // EQUAL     
    { {       309}, {  77} }, // NOT_EQUAL 
    { {       311}, {  78} }, // LT        
    { {       313}, {  79} }, // LE        
    { {       310}, {  80} }, // GT        
    { {       312}, {  81} }, // GE        
    { {         0}, {   0} },              
};

SR__ s_103[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       331}, { 123} }, // l_value       
    { {       292}, {  57} }, // IDENTIFIER    
    { {       282}, {  28} }, // RESULT        
    { {       296}, {  29} }, // STRING_LITERAL
    { {       332}, {  30} }, // expr          
    { {       314}, {  31} }, // OP_PAR        
    { {       337}, {  33} }, // r_value       
    { {       293}, {  34} }, // INT_CONST     
    { {       297}, {  35} }, // TRUE          
    { {       298}, {  36} }, // FALSE         
    { {       294}, {  37} }, // REAL_CONST    
    { {       295}, {  38} }, // CHAR_CONST    
    { {       299}, {  39} }, // NIL           
    { {       333}, {  58} }, // call          
    { {       263}, {  40} }, // AT            
    { {       338}, {  41} }, // unop          
    { {       273}, {  42} }, // NOT           
    { {       307}, {  43} }, // UPLUS         
    { {       306}, {  44} }, // UMINUS        
    { {         0}, {   0} },                  
};

SR__ s_104[] =
{
    { { REQ_DEF}, {  17} },             
    { {     262}, {  66} }, // CARET    
    { {     339}, {  67} }, // binop    
    { {     300}, {  68} }, // PLUS     
    { {     301}, {  69} }, // MINUS    
    { {     302}, {  70} }, // MUL      
    { {     303}, {  71} }, // DIV      
    { {     304}, {  72} }, // INT_DIV  
    { {     305}, {  73} }, // MOD      
    { {     272}, {  74} }, // OR       
    { {     271}, {  75} }, // AND      
    { {     308}, {  76} }, // EQUAL    
    { {     309}, {  77} }, // NOT_EQUAL
    { {     311}, {  78} }, // LT       
    { {     313}, {  79} }, // LE       
    { {     310}, {  80} }, // GT       
    { {     312}, {  81} }, // GE       
    { {       0}, { -77} },             
};

SR__ s_105[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -66} }, 
};

SR__ s_106[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -72} }, 
};

SR__ s_107[] =
{
    { { REQ_DEF}, {  35} },                  
    { {     335}, { 124} }, // full_stmt     
    { {     329}, { 125} }, // stmt          
    { {     331}, { 126} }, // l_value       
    { {     320}, { 127} }, // block         
    { {     333}, { 128} }, // call          
    { {     336}, { 129} }, // full_if       
    { {     270}, { 130} }, // WHILE         
    { {     292}, { 131} }, // IDENTIFIER    
    { {     291}, { 132} }, // GOTO          
    { {     283}, { 133} }, // RETURN        
    { {     261}, { 134} }, // NEW           
    { {     260}, { 135} }, // DISPOSE       
    { {     334}, {  21} }, // if_stmt       
    { {     282}, {  28} }, // RESULT        
    { {     296}, {  29} }, // STRING_LITERAL
    { {     332}, {  30} }, // expr          
    { {     314}, {  31} }, // OP_PAR        
    { {     264}, {   8} }, // BEGIN         
    { {     267}, { 136} }, // IF            
    { {     337}, {  33} }, // r_value       
    { {     293}, {  34} }, // INT_CONST     
    { {     297}, {  35} }, // TRUE          
    { {     298}, {  36} }, // FALSE         
    { {     294}, {  37} }, // REAL_CONST    
    { {     295}, {  38} }, // CHAR_CONST    
    { {     299}, {  39} }, // NIL           
    { {     263}, {  40} }, // AT            
    { {     338}, {  41} }, // unop          
    { {     273}, {  42} }, // NOT           
    { {     307}, {  43} }, // UPLUS         
    { {     306}, {  44} }, // UMINUS        
    { {       0}, { -30} },                  
};

SR__ s_108[] =
{
    { { REQ_TOKEN}, {   8} },           
    { {       323}, { 137} }, // type   
    { {       276}, { 138} }, // INTEGER
    { {       277}, { 139} }, // REAL   
    { {       274}, { 140} }, // BOOLEAN
    { {       275}, { 141} }, // CHAR   
    { {       258}, { 142} }, // ARRAY  
    { {       262}, { 143} }, // CARET  
    { {         0}, {   0} },           
};

SR__ s_109[] =
{
    { { REQ_DEF}, {   3} },           
    { {     322}, { 144} }, // next_id
    { {     289}, {  88} }, // COMMA  
    { {       0}, { -11} },           
};

SR__ s_110[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -5} }, 
};

SR__ s_111[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -6} }, 
};

SR__ s_112[] =
{
    { { REQ_TOKEN}, {   2} },            
    { {       315}, { 145} }, // CLOS_PAR
    { {         0}, {   0} },            
};

SR__ s_113[] =
{
    { { REQ_DEF}, {   3} },              
    { {     328}, { 146} }, // next_arg  
    { {     286}, { 147} }, // SEMI_COLON
    { {       0}, { -17} },              
};

SR__ s_114[] =
{
    { { REQ_TOKEN}, {   2} },              
    { {       292}, { 148} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_115[] =
{
    { { REQ_DEF}, {   3} },           
    { {     322}, { 149} }, // next_id
    { {     289}, {  88} }, // COMMA  
    { {       0}, { -11} },           
};

SR__ s_116[] =
{
    { { REQ_TOKEN}, {   2} },            
    { {       315}, { 150} }, // CLOS_PAR
    { {         0}, {   0} },            
};

SR__ s_117[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -28} }, 
};

SR__ s_118[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -64} }, 
};

SR__ s_119[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -35} }, 
};

SR__ s_120[] =
{
    { { REQ_TOKEN}, {   2} },            
    { {       315}, { 151} }, // CLOS_PAR
    { {         0}, {   0} },            
};

SR__ s_121[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       332}, { 152} }, // expr          
    { {       331}, {  56} }, // l_value       
    { {       337}, {  33} }, // r_value       
    { {       292}, {  57} }, // IDENTIFIER    
    { {       282}, {  28} }, // RESULT        
    { {       296}, {  29} }, // STRING_LITERAL
    { {       314}, {  31} }, // OP_PAR        
    { {       293}, {  34} }, // INT_CONST     
    { {       297}, {  35} }, // TRUE          
    { {       298}, {  36} }, // FALSE         
    { {       294}, {  37} }, // REAL_CONST    
    { {       295}, {  38} }, // CHAR_CONST    
    { {       299}, {  39} }, // NIL           
    { {       333}, {  58} }, // call          
    { {       263}, {  40} }, // AT            
    { {       338}, {  41} }, // unop          
    { {       273}, {  42} }, // NOT           
    { {       307}, {  43} }, // UPLUS         
    { {       306}, {  44} }, // UMINUS        
    { {         0}, {   0} },                  
};

SR__ s_122[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       331}, { 153} }, // l_value       
    { {       292}, {  57} }, // IDENTIFIER    
    { {       282}, {  28} }, // RESULT        
    { {       296}, {  29} }, // STRING_LITERAL
    { {       332}, {  30} }, // expr          
    { {       314}, {  31} }, // OP_PAR        
    { {       337}, {  33} }, // r_value       
    { {       293}, {  34} }, // INT_CONST     
    { {       297}, {  35} }, // TRUE          
    { {       298}, {  36} }, // FALSE         
    { {       294}, {  37} }, // REAL_CONST    
    { {       295}, {  38} }, // CHAR_CONST    
    { {       299}, {  39} }, // NIL           
    { {       333}, {  58} }, // call          
    { {       263}, {  40} }, // AT            
    { {       338}, {  41} }, // unop          
    { {       273}, {  42} }, // NOT           
    { {       307}, {  43} }, // UPLUS         
    { {       306}, {  44} }, // UMINUS        
    { {         0}, {   0} },                  
};

SR__ s_123[] =
{
    { { REQ_DEF}, {   5} },              
    { {     316}, {  54} }, // OP_BRACK  
    { {     266}, { -42} }, // END       
    { {     269}, { -42} }, // ELSE      
    { {     286}, { -42} }, // SEMI_COLON
    { {       0}, { -59} },              
};

SR__ s_124[] =
{
    { { REQ_TOKEN}, {   2} },        
    { {       269}, { 154} }, // ELSE
    { {         0}, {   0} },        
};

SR__ s_125[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -58} }, 
};

SR__ s_126[] =
{
    { { REQ_DEF}, {   3} },            
    { {     285}, { 155} }, // ASSIGN  
    { {     316}, {  54} }, // OP_BRACK
    { {       0}, { -59} },            
};

SR__ s_127[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -32} }, 
};

SR__ s_128[] =
{
    { { REQ_DEF}, {   4} },              
    { {     266}, { -33} }, // END       
    { {     269}, { -33} }, // ELSE      
    { {     286}, { -33} }, // SEMI_COLON
    { {       0}, { -74} },              
};

SR__ s_129[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -47} }, 
};

SR__ s_130[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       332}, { 156} }, // expr          
    { {       331}, {  56} }, // l_value       
    { {       337}, {  33} }, // r_value       
    { {       292}, {  57} }, // IDENTIFIER    
    { {       282}, {  28} }, // RESULT        
    { {       296}, {  29} }, // STRING_LITERAL
    { {       314}, {  31} }, // OP_PAR        
    { {       293}, {  34} }, // INT_CONST     
    { {       297}, {  35} }, // TRUE          
    { {       298}, {  36} }, // FALSE         
    { {       294}, {  37} }, // REAL_CONST    
    { {       295}, {  38} }, // CHAR_CONST    
    { {       299}, {  39} }, // NIL           
    { {       333}, {  58} }, // call          
    { {       263}, {  40} }, // AT            
    { {       338}, {  41} }, // unop          
    { {       273}, {  42} }, // NOT           
    { {       307}, {  43} }, // UPLUS         
    { {       306}, {  44} }, // UMINUS        
    { {         0}, {   0} },                  
};

SR__ s_131[] =
{
    { { REQ_DEF}, {   3} },          
    { {     288}, { 157} }, // COLON 
    { {     314}, {  60} }, // OP_PAR
    { {       0}, { -61} },          
};

SR__ s_132[] =
{
    { { REQ_TOKEN}, {   2} },              
    { {       292}, { 158} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_133[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -38} }, 
};

SR__ s_134[] =
{
    { { REQ_TOKEN}, {  21} },                  
    { {       331}, { 159} }, // l_value       
    { {       316}, { 160} }, // OP_BRACK      
    { {       292}, {  57} }, // IDENTIFIER    
    { {       282}, {  28} }, // RESULT        
    { {       296}, {  29} }, // STRING_LITERAL
    { {       332}, {  30} }, // expr          
    { {       314}, {  31} }, // OP_PAR        
    { {       337}, {  33} }, // r_value       
    { {       293}, {  34} }, // INT_CONST     
    { {       297}, {  35} }, // TRUE          
    { {       298}, {  36} }, // FALSE         
    { {       294}, {  37} }, // REAL_CONST    
    { {       295}, {  38} }, // CHAR_CONST    
    { {       299}, {  39} }, // NIL           
    { {       333}, {  58} }, // call          
    { {       263}, {  40} }, // AT            
    { {       338}, {  41} }, // unop          
    { {       273}, {  42} }, // NOT           
    { {       307}, {  43} }, // UPLUS         
    { {       306}, {  44} }, // UMINUS        
    { {         0}, {   0} },                  
};

SR__ s_135[] =
{
    { { REQ_TOKEN}, {  21} },                  
    { {       331}, { 161} }, // l_value       
    { {       316}, { 162} }, // OP_BRACK      
    { {       292}, {  57} }, // IDENTIFIER    
    { {       282}, {  28} }, // RESULT        
    { {       296}, {  29} }, // STRING_LITERAL
    { {       332}, {  30} }, // expr          
    { {       314}, {  31} }, // OP_PAR        
    { {       337}, {  33} }, // r_value       
    { {       293}, {  34} }, // INT_CONST     
    { {       297}, {  35} }, // TRUE          
    { {       298}, {  36} }, // FALSE         
    { {       294}, {  37} }, // REAL_CONST    
    { {       295}, {  38} }, // CHAR_CONST    
    { {       299}, {  39} }, // NIL           
    { {       333}, {  58} }, // call          
    { {       263}, {  40} }, // AT            
    { {       338}, {  41} }, // unop          
    { {       273}, {  42} }, // NOT           
    { {       307}, {  43} }, // UPLUS         
    { {       306}, {  44} }, // UMINUS        
    { {         0}, {   0} },                  
};

SR__ s_136[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       332}, { 163} }, // expr          
    { {       331}, {  56} }, // l_value       
    { {       337}, {  33} }, // r_value       
    { {       292}, {  57} }, // IDENTIFIER    
    { {       282}, {  28} }, // RESULT        
    { {       296}, {  29} }, // STRING_LITERAL
    { {       314}, {  31} }, // OP_PAR        
    { {       293}, {  34} }, // INT_CONST     
    { {       297}, {  35} }, // TRUE          
    { {       298}, {  36} }, // FALSE         
    { {       294}, {  37} }, // REAL_CONST    
    { {       295}, {  38} }, // CHAR_CONST    
    { {       299}, {  39} }, // NIL           
    { {       333}, {  58} }, // call          
    { {       263}, {  40} }, // AT            
    { {       338}, {  41} }, // unop          
    { {       273}, {  42} }, // NOT           
    { {       307}, {  43} }, // UPLUS         
    { {       306}, {  44} }, // UMINUS        
    { {         0}, {   0} },                  
};

SR__ s_137[] =
{
    { { REQ_TOKEN}, {   2} },              
    { {       286}, { 164} }, // SEMI_COLON
    { {         0}, {   0} },              
};

SR__ s_138[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -20} }, 
};

SR__ s_139[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -21} }, 
};

SR__ s_140[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -22} }, 
};

SR__ s_141[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -23} }, 
};

SR__ s_142[] =
{
    { { REQ_TOKEN}, {   3} },            
    { {       259}, { 165} }, // OF      
    { {       316}, { 166} }, // OP_BRACK
    { {         0}, {   0} },            
};

SR__ s_143[] =
{
    { { REQ_TOKEN}, {   8} },           
    { {       323}, { 167} }, // type   
    { {       276}, { 138} }, // INTEGER
    { {       277}, { 139} }, // REAL   
    { {       274}, { 140} }, // BOOLEAN
    { {       275}, { 141} }, // CHAR   
    { {       258}, { 142} }, // ARRAY  
    { {       262}, { 143} }, // CARET  
    { {         0}, {   0} },           
};

SR__ s_144[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -10} }, 
};

SR__ s_145[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -12} }, 
};

SR__ s_146[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -14} }, 
};

SR__ s_147[] =
{
    { { REQ_DEF}, {   3} },              
    { {     328}, { 168} }, // next_arg  
    { {     286}, { 147} }, // SEMI_COLON
    { {       0}, { -17} },              
};

SR__ s_148[] =
{
    { { REQ_DEF}, {   3} },           
    { {     322}, { 169} }, // next_id
    { {     289}, {  88} }, // COMMA  
    { {       0}, { -11} },           
};

SR__ s_149[] =
{
    { { REQ_TOKEN}, {   2} },         
    { {       288}, { 170} }, // COLON
    { {         0}, {   0} },         
};

SR__ s_150[] =
{
    { { REQ_TOKEN}, {   2} },         
    { {       288}, { 171} }, // COLON
    { {         0}, {   0} },         
};

SR__ s_151[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -79} }, 
};

SR__ s_152[] =
{
    { { REQ_DEF}, {  19} },             
    { {     340}, { 172} }, // next_expr
    { {     262}, {  66} }, // CARET    
    { {     339}, {  67} }, // binop    
    { {     289}, { 121} }, // COMMA    
    { {     300}, {  68} }, // PLUS     
    { {     301}, {  69} }, // MINUS    
    { {     302}, {  70} }, // MUL      
    { {     303}, {  71} }, // DIV      
    { {     304}, {  72} }, // INT_DIV  
    { {     305}, {  73} }, // MOD      
    { {     272}, {  74} }, // OR       
    { {     271}, {  75} }, // AND      
    { {     308}, {  76} }, // EQUAL    
    { {     309}, {  77} }, // NOT_EQUAL
    { {     311}, {  78} }, // LT       
    { {     313}, {  79} }, // LE       
    { {     310}, {  80} }, // GT       
    { {     312}, {  81} }, // GE       
    { {       0}, { -81} },             
};

SR__ s_153[] =
{
    { { REQ_DEF}, {   5} },              
    { {     316}, {  54} }, // OP_BRACK  
    { {     266}, { -40} }, // END       
    { {     269}, { -40} }, // ELSE      
    { {     286}, { -40} }, // SEMI_COLON
    { {       0}, { -59} },              
};

SR__ s_154[] =
{
    { { REQ_DEF}, {  30} },                  
    { {     329}, { 173} }, // stmt          
    { {     331}, {  18} }, // l_value       
    { {     320}, {  19} }, // block         
    { {     333}, {  20} }, // call          
    { {     334}, {  21} }, // if_stmt       
    { {     270}, {  22} }, // WHILE         
    { {     292}, {  23} }, // IDENTIFIER    
    { {     291}, {  24} }, // GOTO          
    { {     283}, {  25} }, // RETURN        
    { {     261}, {  26} }, // NEW           
    { {     260}, {  27} }, // DISPOSE       
    { {     282}, {  28} }, // RESULT        
    { {     296}, {  29} }, // STRING_LITERAL
    { {     332}, {  30} }, // expr          
    { {     314}, {  31} }, // OP_PAR        
    { {     264}, {   8} }, // BEGIN         
    { {     267}, {  32} }, // IF            
    { {     337}, {  33} }, // r_value       
    { {     293}, {  34} }, // INT_CONST     
    { {     297}, {  35} }, // TRUE          
    { {     298}, {  36} }, // FALSE         
    { {     294}, {  37} }, // REAL_CONST    
    { {     295}, {  38} }, // CHAR_CONST    
    { {     299}, {  39} }, // NIL           
    { {     263}, {  40} }, // AT            
    { {     338}, {  41} }, // unop          
    { {     273}, {  42} }, // NOT           
    { {     307}, {  43} }, // UPLUS         
    { {     306}, {  44} }, // UMINUS        
    { {       0}, { -30} },                  
};

SR__ s_155[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       332}, { 174} }, // expr          
    { {       331}, {  56} }, // l_value       
    { {       337}, {  33} }, // r_value       
    { {       292}, {  57} }, // IDENTIFIER    
    { {       282}, {  28} }, // RESULT        
    { {       296}, {  29} }, // STRING_LITERAL
    { {       314}, {  31} }, // OP_PAR        
    { {       293}, {  34} }, // INT_CONST     
    { {       297}, {  35} }, // TRUE          
    { {       298}, {  36} }, // FALSE         
    { {       294}, {  37} }, // REAL_CONST    
    { {       295}, {  38} }, // CHAR_CONST    
    { {       299}, {  39} }, // NIL           
    { {       333}, {  58} }, // call          
    { {       263}, {  40} }, // AT            
    { {       338}, {  41} }, // unop          
    { {       273}, {  42} }, // NOT           
    { {       307}, {  43} }, // UPLUS         
    { {       306}, {  44} }, // UMINUS        
    { {         0}, {   0} },                  
};

SR__ s_156[] =
{
    { { REQ_TOKEN}, {  18} },             
    { {       265}, { 175} }, // DO       
    { {       262}, {  66} }, // CARET    
    { {       339}, {  67} }, // binop    
    { {       300}, {  68} }, // PLUS     
    { {       301}, {  69} }, // MINUS    
    { {       302}, {  70} }, // MUL      
    { {       303}, {  71} }, // DIV      
    { {       304}, {  72} }, // INT_DIV  
    { {       305}, {  73} }, // MOD      
    { {       272}, {  74} }, // OR       
    { {       271}, {  75} }, // AND      
    { {       308}, {  76} }, // EQUAL    
    { {       309}, {  77} }, // NOT_EQUAL
    { {       311}, {  78} }, // LT       
    { {       313}, {  79} }, // LE       
    { {       310}, {  80} }, // GT       
    { {       312}, {  81} }, // GE       
    { {         0}, {   0} },             
};

SR__ s_157[] =
{
    { { REQ_DEF}, {  30} },                  
    { {     329}, { 176} }, // stmt          
    { {     331}, {  18} }, // l_value       
    { {     320}, {  19} }, // block         
    { {     333}, {  20} }, // call          
    { {     334}, {  21} }, // if_stmt       
    { {     270}, {  22} }, // WHILE         
    { {     292}, {  23} }, // IDENTIFIER    
    { {     291}, {  24} }, // GOTO          
    { {     283}, {  25} }, // RETURN        
    { {     261}, {  26} }, // NEW           
    { {     260}, {  27} }, // DISPOSE       
    { {     282}, {  28} }, // RESULT        
    { {     296}, {  29} }, // STRING_LITERAL
    { {     332}, {  30} }, // expr          
    { {     314}, {  31} }, // OP_PAR        
    { {     264}, {   8} }, // BEGIN         
    { {     267}, {  32} }, // IF            
    { {     337}, {  33} }, // r_value       
    { {     293}, {  34} }, // INT_CONST     
    { {     297}, {  35} }, // TRUE          
    { {     298}, {  36} }, // FALSE         
    { {     294}, {  37} }, // REAL_CONST    
    { {     295}, {  38} }, // CHAR_CONST    
    { {     299}, {  39} }, // NIL           
    { {     263}, {  40} }, // AT            
    { {     338}, {  41} }, // unop          
    { {     273}, {  42} }, // NOT           
    { {     307}, {  43} }, // UPLUS         
    { {     306}, {  44} }, // UMINUS        
    { {       0}, { -30} },                  
};

SR__ s_158[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -37} }, 
};

SR__ s_159[] =
{
    { { REQ_DEF}, {   5} },              
    { {     316}, {  54} }, // OP_BRACK  
    { {     266}, { -39} }, // END       
    { {     269}, { -39} }, // ELSE      
    { {     286}, { -39} }, // SEMI_COLON
    { {       0}, { -59} },              
};

SR__ s_160[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       332}, { 177} }, // expr          
    { {       331}, {  56} }, // l_value       
    { {       337}, {  33} }, // r_value       
    { {       292}, {  57} }, // IDENTIFIER    
    { {       282}, {  28} }, // RESULT        
    { {       296}, {  29} }, // STRING_LITERAL
    { {       314}, {  31} }, // OP_PAR        
    { {       293}, {  34} }, // INT_CONST     
    { {       297}, {  35} }, // TRUE          
    { {       298}, {  36} }, // FALSE         
    { {       294}, {  37} }, // REAL_CONST    
    { {       295}, {  38} }, // CHAR_CONST    
    { {       299}, {  39} }, // NIL           
    { {       333}, {  58} }, // call          
    { {       263}, {  40} }, // AT            
    { {       338}, {  41} }, // unop          
    { {       273}, {  42} }, // NOT           
    { {       307}, {  43} }, // UPLUS         
    { {       306}, {  44} }, // UMINUS        
    { {         0}, {   0} },                  
};

SR__ s_161[] =
{
    { { REQ_DEF}, {   5} },              
    { {     316}, {  54} }, // OP_BRACK  
    { {     266}, { -41} }, // END       
    { {     269}, { -41} }, // ELSE      
    { {     286}, { -41} }, // SEMI_COLON
    { {       0}, { -59} },              
};

SR__ s_162[] =
{
    { { REQ_TOKEN}, {   2} },              
    { {       317}, { 178} }, // CLOS_BRACK
    { {         0}, {   0} },              
};

SR__ s_163[] =
{
    { { REQ_TOKEN}, {  18} },             
    { {       268}, { 179} }, // THEN     
    { {       262}, {  66} }, // CARET    
    { {       339}, {  67} }, // binop    
    { {       300}, {  68} }, // PLUS     
    { {       301}, {  69} }, // MINUS    
    { {       302}, {  70} }, // MUL      
    { {       303}, {  71} }, // DIV      
    { {       304}, {  72} }, // INT_DIV  
    { {       305}, {  73} }, // MOD      
    { {       272}, {  74} }, // OR       
    { {       271}, {  75} }, // AND      
    { {       308}, {  76} }, // EQUAL    
    { {       309}, {  77} }, // NOT_EQUAL
    { {       311}, {  78} }, // LT       
    { {       313}, {  79} }, // LE       
    { {       310}, {  80} }, // GT       
    { {       312}, {  81} }, // GE       
    { {         0}, {   0} },             
};

SR__ s_164[] =
{
    { { REQ_DEF}, {   3} },              
    { {     324}, { 180} }, // decl      
    { {     292}, { 181} }, // IDENTIFIER
    { {       0}, {  -9} },              
};

SR__ s_165[] =
{
    { { REQ_TOKEN}, {   8} },           
    { {       323}, { 182} }, // type   
    { {       276}, { 138} }, // INTEGER
    { {       277}, { 139} }, // REAL   
    { {       274}, { 140} }, // BOOLEAN
    { {       275}, { 141} }, // CHAR   
    { {       258}, { 142} }, // ARRAY  
    { {       262}, { 143} }, // CARET  
    { {         0}, {   0} },           
};

SR__ s_166[] =
{
    { { REQ_TOKEN}, {   2} },             
    { {       293}, { 183} }, // INT_CONST
    { {         0}, {   0} },             
};

SR__ s_167[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -26} }, 
};

SR__ s_168[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -16} }, 
};

SR__ s_169[] =
{
    { { REQ_TOKEN}, {   2} },         
    { {       288}, { 184} }, // COLON
    { {         0}, {   0} },         
};

SR__ s_170[] =
{
    { { REQ_TOKEN}, {   8} },           
    { {       323}, { 185} }, // type   
    { {       276}, { 138} }, // INTEGER
    { {       277}, { 139} }, // REAL   
    { {       274}, { 140} }, // BOOLEAN
    { {       275}, { 141} }, // CHAR   
    { {       258}, { 142} }, // ARRAY  
    { {       262}, { 143} }, // CARET  
    { {         0}, {   0} },           
};

SR__ s_171[] =
{
    { { REQ_TOKEN}, {   8} },           
    { {       323}, { 186} }, // type   
    { {       276}, { 138} }, // INTEGER
    { {       277}, { 139} }, // REAL   
    { {       274}, { 140} }, // BOOLEAN
    { {       275}, { 141} }, // CHAR   
    { {       258}, { 142} }, // ARRAY  
    { {       262}, { 143} }, // CARET  
    { {         0}, {   0} },           
};

SR__ s_172[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -80} }, 
};

SR__ s_173[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -57} }, 
};

SR__ s_174[] =
{
    { { REQ_DEF}, {  17} },             
    { {     262}, {  66} }, // CARET    
    { {     339}, {  67} }, // binop    
    { {     300}, {  68} }, // PLUS     
    { {     301}, {  69} }, // MINUS    
    { {     302}, {  70} }, // MUL      
    { {     303}, {  71} }, // DIV      
    { {     304}, {  72} }, // INT_DIV  
    { {     305}, {  73} }, // MOD      
    { {     272}, {  74} }, // OR       
    { {     271}, {  75} }, // AND      
    { {     308}, {  76} }, // EQUAL    
    { {     309}, {  77} }, // NOT_EQUAL
    { {     311}, {  78} }, // LT       
    { {     313}, {  79} }, // LE       
    { {     310}, {  80} }, // GT       
    { {     312}, {  81} }, // GE       
    { {       0}, { -31} },             
};

SR__ s_175[] =
{
    { { REQ_DEF}, {  30} },                  
    { {     329}, { 187} }, // stmt          
    { {     331}, {  18} }, // l_value       
    { {     320}, {  19} }, // block         
    { {     333}, {  20} }, // call          
    { {     334}, {  21} }, // if_stmt       
    { {     270}, {  22} }, // WHILE         
    { {     292}, {  23} }, // IDENTIFIER    
    { {     291}, {  24} }, // GOTO          
    { {     283}, {  25} }, // RETURN        
    { {     261}, {  26} }, // NEW           
    { {     260}, {  27} }, // DISPOSE       
    { {     282}, {  28} }, // RESULT        
    { {     296}, {  29} }, // STRING_LITERAL
    { {     332}, {  30} }, // expr          
    { {     314}, {  31} }, // OP_PAR        
    { {     264}, {   8} }, // BEGIN         
    { {     267}, {  32} }, // IF            
    { {     337}, {  33} }, // r_value       
    { {     293}, {  34} }, // INT_CONST     
    { {     297}, {  35} }, // TRUE          
    { {     298}, {  36} }, // FALSE         
    { {     294}, {  37} }, // REAL_CONST    
    { {     295}, {  38} }, // CHAR_CONST    
    { {     299}, {  39} }, // NIL           
    { {     263}, {  40} }, // AT            
    { {     338}, {  41} }, // unop          
    { {     273}, {  42} }, // NOT           
    { {     307}, {  43} }, // UPLUS         
    { {     306}, {  44} }, // UMINUS        
    { {       0}, { -30} },                  
};

SR__ s_176[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -36} }, 
};

SR__ s_177[] =
{
    { { REQ_TOKEN}, {  18} },              
    { {       317}, { 188} }, // CLOS_BRACK
    { {       262}, {  66} }, // CARET     
    { {       339}, {  67} }, // binop     
    { {       300}, {  68} }, // PLUS      
    { {       301}, {  69} }, // MINUS     
    { {       302}, {  70} }, // MUL       
    { {       303}, {  71} }, // DIV       
    { {       304}, {  72} }, // INT_DIV   
    { {       305}, {  73} }, // MOD       
    { {       272}, {  74} }, // OR        
    { {       271}, {  75} }, // AND       
    { {       308}, {  76} }, // EQUAL     
    { {       309}, {  77} }, // NOT_EQUAL 
    { {       311}, {  78} }, // LT        
    { {       313}, {  79} }, // LE        
    { {       310}, {  80} }, // GT        
    { {       312}, {  81} }, // GE        
    { {         0}, {   0} },              
};

SR__ s_178[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       331}, { 189} }, // l_value       
    { {       292}, {  57} }, // IDENTIFIER    
    { {       282}, {  28} }, // RESULT        
    { {       296}, {  29} }, // STRING_LITERAL
    { {       332}, {  30} }, // expr          
    { {       314}, {  31} }, // OP_PAR        
    { {       337}, {  33} }, // r_value       
    { {       293}, {  34} }, // INT_CONST     
    { {       297}, {  35} }, // TRUE          
    { {       298}, {  36} }, // FALSE         
    { {       294}, {  37} }, // REAL_CONST    
    { {       295}, {  38} }, // CHAR_CONST    
    { {       299}, {  39} }, // NIL           
    { {       333}, {  58} }, // call          
    { {       263}, {  40} }, // AT            
    { {       338}, {  41} }, // unop          
    { {       273}, {  42} }, // NOT           
    { {       307}, {  43} }, // UPLUS         
    { {       306}, {  44} }, // UMINUS        
    { {         0}, {   0} },                  
};

SR__ s_179[] =
{
    { { REQ_DEF}, {  33} },                  
    { {     335}, { 190} }, // full_stmt     
    { {     329}, { 125} }, // stmt          
    { {     331}, { 126} }, // l_value       
    { {     320}, { 127} }, // block         
    { {     333}, { 128} }, // call          
    { {     336}, { 129} }, // full_if       
    { {     270}, { 130} }, // WHILE         
    { {     292}, { 131} }, // IDENTIFIER    
    { {     291}, { 132} }, // GOTO          
    { {     283}, { 133} }, // RETURN        
    { {     261}, { 134} }, // NEW           
    { {     260}, { 135} }, // DISPOSE       
    { {     334}, {  21} }, // if_stmt       
    { {     282}, {  28} }, // RESULT        
    { {     296}, {  29} }, // STRING_LITERAL
    { {     332}, {  30} }, // expr          
    { {     314}, {  31} }, // OP_PAR        
    { {     264}, {   8} }, // BEGIN         
    { {     267}, { 136} }, // IF            
    { {     337}, {  33} }, // r_value       
    { {     293}, {  34} }, // INT_CONST     
    { {     297}, {  35} }, // TRUE          
    { {     298}, {  36} }, // FALSE         
    { {     294}, {  37} }, // REAL_CONST    
    { {     295}, {  38} }, // CHAR_CONST    
    { {     299}, {  39} }, // NIL           
    { {     263}, {  40} }, // AT            
    { {     338}, {  41} }, // unop          
    { {     273}, {  42} }, // NOT           
    { {     307}, {  43} }, // UPLUS         
    { {     306}, {  44} }, // UMINUS        
    { {       0}, { -30} },                  
};

SR__ s_180[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -4} }, 
};

SR__ s_181[] =
{
    { { REQ_DEF}, {   3} },           
    { {     322}, { 191} }, // next_id
    { {     289}, {  88} }, // COMMA  
    { {       0}, { -11} },           
};

SR__ s_182[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -24} }, 
};

SR__ s_183[] =
{
    { { REQ_TOKEN}, {   2} },              
    { {       317}, { 192} }, // CLOS_BRACK
    { {         0}, {   0} },              
};

SR__ s_184[] =
{
    { { REQ_TOKEN}, {   8} },           
    { {       323}, { 193} }, // type   
    { {       276}, { 138} }, // INTEGER
    { {       277}, { 139} }, // REAL   
    { {       274}, { 140} }, // BOOLEAN
    { {       275}, { 141} }, // CHAR   
    { {       258}, { 142} }, // ARRAY  
    { {       262}, { 143} }, // CARET  
    { {         0}, {   0} },           
};

SR__ s_185[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -19} }, 
};

SR__ s_186[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -13} }, 
};

SR__ s_187[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -35} }, 
};

SR__ s_188[] =
{
    { { REQ_TOKEN}, {  20} },                  
    { {       331}, { 194} }, // l_value       
    { {       292}, {  57} }, // IDENTIFIER    
    { {       282}, {  28} }, // RESULT        
    { {       296}, {  29} }, // STRING_LITERAL
    { {       332}, {  30} }, // expr          
    { {       314}, {  31} }, // OP_PAR        
    { {       337}, {  33} }, // r_value       
    { {       293}, {  34} }, // INT_CONST     
    { {       297}, {  35} }, // TRUE          
    { {       298}, {  36} }, // FALSE         
    { {       294}, {  37} }, // REAL_CONST    
    { {       295}, {  38} }, // CHAR_CONST    
    { {       299}, {  39} }, // NIL           
    { {       333}, {  58} }, // call          
    { {       263}, {  40} }, // AT            
    { {       338}, {  41} }, // unop          
    { {       273}, {  42} }, // NOT           
    { {       307}, {  43} }, // UPLUS         
    { {       306}, {  44} }, // UMINUS        
    { {         0}, {   0} },                  
};

SR__ s_189[] =
{
    { { REQ_DEF}, {   5} },              
    { {     316}, {  54} }, // OP_BRACK  
    { {     266}, { -42} }, // END       
    { {     269}, { -42} }, // ELSE      
    { {     286}, { -42} }, // SEMI_COLON
    { {       0}, { -59} },              
};

SR__ s_190[] =
{
    { { REQ_TOKEN}, {   2} },        
    { {       269}, { 195} }, // ELSE
    { {         0}, {   0} },        
};

SR__ s_191[] =
{
    { { REQ_TOKEN}, {   2} },         
    { {       288}, { 196} }, // COLON
    { {         0}, {   0} },         
};

SR__ s_192[] =
{
    { { REQ_TOKEN}, {   2} },      
    { {       259}, { 197} }, // OF
    { {         0}, {   0} },      
};

SR__ s_193[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -18} }, 
};

SR__ s_194[] =
{
    { { REQ_DEF}, {   5} },              
    { {     316}, {  54} }, // OP_BRACK  
    { {     266}, { -40} }, // END       
    { {     269}, { -40} }, // ELSE      
    { {     286}, { -40} }, // SEMI_COLON
    { {       0}, { -59} },              
};

SR__ s_195[] =
{
    { { REQ_DEF}, {  33} },                  
    { {     335}, { 198} }, // full_stmt     
    { {     329}, { 173} }, // stmt          
    { {     331}, { 126} }, // l_value       
    { {     320}, { 127} }, // block         
    { {     333}, { 128} }, // call          
    { {     336}, { 129} }, // full_if       
    { {     270}, { 130} }, // WHILE         
    { {     292}, { 131} }, // IDENTIFIER    
    { {     291}, { 132} }, // GOTO          
    { {     283}, { 133} }, // RETURN        
    { {     261}, { 134} }, // NEW           
    { {     260}, { 135} }, // DISPOSE       
    { {     334}, {  21} }, // if_stmt       
    { {     282}, {  28} }, // RESULT        
    { {     296}, {  29} }, // STRING_LITERAL
    { {     332}, {  30} }, // expr          
    { {     314}, {  31} }, // OP_PAR        
    { {     264}, {   8} }, // BEGIN         
    { {     267}, { 136} }, // IF            
    { {     337}, {  33} }, // r_value       
    { {     293}, {  34} }, // INT_CONST     
    { {     297}, {  35} }, // TRUE          
    { {     298}, {  36} }, // FALSE         
    { {     294}, {  37} }, // REAL_CONST    
    { {     295}, {  38} }, // CHAR_CONST    
    { {     299}, {  39} }, // NIL           
    { {     263}, {  40} }, // AT            
    { {     338}, {  41} }, // unop          
    { {     273}, {  42} }, // NOT           
    { {     307}, {  43} }, // UPLUS         
    { {     306}, {  44} }, // UMINUS        
    { {       0}, { -30} },                  
};

SR__ s_196[] =
{
    { { REQ_TOKEN}, {   8} },           
    { {       323}, { 199} }, // type   
    { {       276}, { 138} }, // INTEGER
    { {       277}, { 139} }, // REAL   
    { {       274}, { 140} }, // BOOLEAN
    { {       275}, { 141} }, // CHAR   
    { {       258}, { 142} }, // ARRAY  
    { {       262}, { 143} }, // CARET  
    { {         0}, {   0} },           
};

SR__ s_197[] =
{
    { { REQ_TOKEN}, {   8} },           
    { {       323}, { 200} }, // type   
    { {       276}, { 138} }, // INTEGER
    { {       277}, { 139} }, // REAL   
    { {       274}, { 140} }, // BOOLEAN
    { {       275}, { 141} }, // CHAR   
    { {       258}, { 142} }, // ARRAY  
    { {       262}, { 143} }, // CARET  
    { {         0}, {   0} },           
};

SR__ s_198[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -56} }, 
};

SR__ s_199[] =
{
    { { REQ_TOKEN}, {   2} },              
    { {       286}, { 201} }, // SEMI_COLON
    { {         0}, {   0} },              
};

SR__ s_200[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -25} }, 
};

SR__ s_201[] =
{
    { { REQ_DEF}, {   3} },              
    { {     324}, { 202} }, // decl      
    { {     292}, { 181} }, // IDENTIFIER
    { {       0}, {  -9} },              
};

SR__ s_202[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -8} }, 
};


// State array:
SR__ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,  s_92,  s_93,  s_94,  s_95,  s_96,  s_97,  s_98,  s_99,
  s_100,  s_101,  s_102,  s_103,  s_104,  s_105,  s_106,  s_107,  s_108,  s_109,
  s_110,  s_111,  s_112,  s_113,  s_114,  s_115,  s_116,  s_117,  s_118,  s_119,
  s_120,  s_121,  s_122,  s_123,  s_124,  s_125,  s_126,  s_127,  s_128,  s_129,
  s_130,  s_131,  s_132,  s_133,  s_134,  s_135,  s_136,  s_137,  s_138,  s_139,
  s_140,  s_141,  s_142,  s_143,  s_144,  s_145,  s_146,  s_147,  s_148,  s_149,
  s_150,  s_151,  s_152,  s_153,  s_154,  s_155,  s_156,  s_157,  s_158,  s_159,
  s_160,  s_161,  s_162,  s_163,  s_164,  s_165,  s_166,  s_167,  s_168,  s_169,
  s_170,  s_171,  s_172,  s_173,  s_174,  s_175,  s_176,  s_177,  s_178,  s_179,
  s_180,  s_181,  s_182,  s_183,  s_184,  s_185,  s_186,  s_187,  s_188,  s_189,
  s_190,  s_191,  s_192,  s_193,  s_194,  s_195,  s_196,  s_197,  s_198,  s_199,
  s_200,  s_201,  s_202,
};

} // anonymous namespace ends




// If the parsing function call (i.e., parse()' needs arguments, then provide
// an overloaded function.  The code below doesn't rely on parameters, so no
// arguments are required.  Furthermore, parse uses a function try block to
// allow us to do ACCEPT and ABORT from anywhere, even from within members
// called by actions, simply throwing the appropriate exceptions.


// base/base1
ParserBase::ParserBase()
:
    d_token(Reserved__::UNDETERMINED__),
    // $insert baseclasscode
    d_requiredTokens__(0)
{
}

// base/clearin
void ParserBase::clearin__()
{
    d_nErrors__ = 0;
    d_stackIdx = -1;
    d_stateStack.clear();
    d_token = Reserved__::UNDETERMINED__;
    d_next = TokenPair{ Reserved__::UNDETERMINED__, STYPE__{} };
    d_recovery = false;
    d_acceptedTokens__ = d_requiredTokens__;
    d_val__ = STYPE__{};

    push__(0);
}

// base/debugfunctions

void ParserBase::setDebug(bool mode)
{
    d_actionCases__ = false;
    d_debug__ = mode;
}

void ParserBase::setDebug(DebugMode__ mode)
{
    d_actionCases__ = mode & ACTIONCASES;
    d_debug__ =       mode & ON;
}

// base/lex
void ParserBase::lex__(int token)
{
    d_token = token;

    if (d_token <= 0)
        d_token = Reserved__::EOF__;

    d_terminalToken = true;
}

// base/lookup
int ParserBase::lookup__() const
{
    // if the final transition is negative, then we should reduce by the rule
    // given by its positive value.

    SR__ const *sr = s_state[d_state];
    SR__ const *last = sr + sr->d_lastIdx;

    for ( ; ++sr != last; )           // visit all but the last SR entries
    {
        if (sr->d_token == d_token)
            return sr->d_action;
    }

    if (sr == last)   // reached the last element
    {
        if (sr->d_action < 0)   // default reduction
        {
            return sr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN__;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = sr->d_action;


    return action;
}

// base/pop
void ParserBase::pop__(size_t count)
{
    if (d_stackIdx < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx -= count;
    d_state = d_stateStack[d_stackIdx].first;
    d_vsp = &d_stateStack[d_stackIdx];

}

// base/poptoken
void ParserBase::popToken__()
{
    d_token = d_next.first;
    d_val__ = std::move(d_next.second);

    d_next.first = Reserved__::UNDETERMINED__;
}

// base/push
void ParserBase::push__(size_t state)
{
    size_t currentSize = d_stateStack.size();
    if (stackSize__() == currentSize)
    {
        size_t newSize = currentSize + STACK_EXPANSION__;
        d_stateStack.resize(newSize);
    }

    ++d_stackIdx;
    d_stateStack[d_stackIdx] = 
                    StatePair{ d_state = state, std::move(d_val__) };

    d_vsp = &d_stateStack[d_stackIdx];

    if (d_stackIdx == 0)
    {
    }
    else
    {
    }
}

// base/pushtoken
void ParserBase::pushToken__(int token)
{
    d_next = TokenPair{ d_token, std::move(d_val__) };
    d_token = token;
}

// base/redotoken
void ParserBase::redoToken__()
{
    if (d_token != Reserved__::UNDETERMINED__)
        pushToken__(d_token);
}

// base/reduce
void ParserBase::reduce__(int rule)
{
    PI__ const &pi = s_productionInfo[rule];

    d_token = pi.d_nonTerm;
    pop__(pi.d_size);

    d_terminalToken = false;
}

// base/shift
void ParserBase::shift__(int action)
{
    push__(action);
    popToken__();               // token processed

    if (d_recovery and d_terminalToken)
    {
        d_recovery = false;
        d_acceptedTokens__ = 0;
    }
}

// base/startrecovery
void ParserBase::startRecovery__()
{
    int lastToken = d_token;                // give the unexpected token a
                                            // chance to be processed
                                            // again.

    pushToken__(Reserved__::errTok__);      // specify errTok__ as next token
    push__(lookup__());                     // push the error state

    d_token = lastToken;                    // reactivate the unexpected
                                            // token (we're now in an
                                            // ERROR state).

    d_recovery = true;
}

// base/top
inline size_t ParserBase::top__() const
{
    return d_stateStack[d_stackIdx].first;
}

// derived/errorrecovery
void Parser::errorRecovery__()
{
    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)



    if (d_acceptedTokens__ >= d_requiredTokens__)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors__;                          // were accepted. Otherwise
        error();                                // simply skip input
    }

    // get the error state
    while (not (s_state[top__()][0].d_type & ERR_ITEM))
    {
        pop__();
    }

    // In the error state, looking up a token allows us to proceed.
    // Continuation may be require multiple reductions, but eventually a
    // terminal-token shift is used. See nextCycle__ for details.

    startRecovery__();
}

// derived/executeaction
void Parser::executeAction__(int production)
try
{
    if (token__() != Reserved__::UNDETERMINED__)
        pushToken__(token__());     // save an already available token
    switch (production)
    {
        // $insert actioncases
        
        case 1:
#line 31 "parser"
        {
            d_val__ = vs__(-4);
        }
        break;

        case 2:
#line 35 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

        case 3:
#line 36 "parser"
        {
            d_val__ = vs__(-1);
        }
        break;

        case 4:
#line 40 "parser"
        {
            d_val__ = vs__(-6);
        }
        break;

        case 5:
#line 41 "parser"
        {
            d_val__ = vs__(-3);
        }
        break;

        case 6:
#line 42 "parser"
        {
            d_val__ = vs__(-3);
        }
        break;

        case 7:
#line 43 "parser"
        {
            d_val__ = vs__(-2);
        }
        break;

        case 8:
#line 47 "parser"
        {
            d_val__ = vs__(-5);
        }
        break;

        case 10:
#line 52 "parser"
        {
            d_val__ = vs__(-2);
        }
        break;

        case 12:
#line 57 "parser"
        {
            d_val__ = vs__(-4);
        }
        break;

        case 13:
#line 58 "parser"
        {
            d_val__ = vs__(-6);
        }
        break;

        case 14:
#line 62 "parser"
        {
            d_val__ = vs__(-1);
        }
        break;

        case 16:
#line 67 "parser"
        {
            d_val__ = vs__(-1);
        }
        break;

        case 18:
#line 72 "parser"
        {
            d_val__ = vs__(-4);
        }
        break;

        case 19:
#line 73 "parser"
        {
            d_val__ = vs__(-3);
        }
        break;

        case 20:
#line 77 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

        case 21:
#line 78 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

        case 22:
#line 79 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

        case 23:
#line 80 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

        case 24:
#line 81 "parser"
        {
            d_val__ = vs__(-2);
        }
        break;

        case 25:
#line 82 "parser"
        {
            d_val__ = vs__(-5);
        }
        break;

        case 26:
#line 83 "parser"
        {
            d_val__ = vs__(-1);
        }
        break;

        case 27:
#line 87 "parser"
        {
            d_val__ = vs__(-3);
        }
        break;

        case 28:
#line 91 "parser"
        {
            d_val__ = vs__(-2);
        }
        break;

        case 31:
#line 97 "parser"
        {
            d_val__ = vs__(-2);
        }
        break;

        case 32:
#line 98 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

        case 33:
#line 99 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

        case 34:
#line 100 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

        case 35:
#line 101 "parser"
        {
            d_val__ = vs__(-3);
        }
        break;

        case 36:
#line 102 "parser"
        {
            d_val__ = vs__(-2);
        }
        break;

        case 37:
#line 103 "parser"
        {
            d_val__ = vs__(-1);
        }
        break;

        case 38:
#line 104 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

        case 39:
#line 105 "parser"
        {
            d_val__ = vs__(-1);
        }
        break;

        case 40:
#line 106 "parser"
        {
            d_val__ = vs__(-4);
        }
        break;

        case 41:
#line 107 "parser"
        {
            d_val__ = vs__(-1);
        }
        break;

        case 42:
#line 108 "parser"
        {
            d_val__ = vs__(-3);
        }
        break;

        case 44:
#line 113 "parser"
        {
            d_val__ = vs__(-2);
        }
        break;

        case 45:
#line 114 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

        case 46:
#line 115 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

        case 47:
#line 116 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

        case 48:
#line 117 "parser"
        {
            d_val__ = vs__(-3);
        }
        break;

        case 49:
#line 118 "parser"
        {
            d_val__ = vs__(-2);
        }
        break;

        case 50:
#line 119 "parser"
        {
            d_val__ = vs__(-1);
        }
        break;

        case 51:
#line 120 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

        case 52:
#line 121 "parser"
        {
            d_val__ = vs__(-1);
        }
        break;

        case 53:
#line 122 "parser"
        {
            d_val__ = vs__(-4);
        }
        break;

        case 54:
#line 123 "parser"
        {
            d_val__ = vs__(-1);
        }
        break;

        case 55:
#line 124 "parser"
        {
            d_val__ = vs__(-3);
        }
        break;

        case 56:
#line 128 "parser"
        {
            d_val__ = vs__(-5);
        }
        break;

        case 57:
#line 132 "parser"
        {
            d_val__ = vs__(-5);
        }
        break;

        case 58:
#line 133 "parser"
        {
            d_val__ = vs__(-3);
        }
        break;

        case 59:
#line 137 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

        case 60:
#line 138 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

        case 61:
#line 142 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

        case 62:
#line 143 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

        case 63:
#line 144 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

        case 64:
#line 145 "parser"
        {
            d_val__ = vs__(-3);
        }
        break;

        case 65:
#line 146 "parser"
        {
            d_val__ = vs__(-1);
        }
        break;

        case 66:
#line 147 "parser"
        {
            d_val__ = vs__(-2);
        }
        break;

        case 67:
#line 151 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

        case 68:
#line 152 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

        case 69:
#line 153 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

        case 70:
#line 154 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

        case 71:
#line 155 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

        case 72:
#line 156 "parser"
        {
            d_val__ = vs__(-2);
        }
        break;

        case 73:
#line 157 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

        case 74:
#line 158 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

        case 75:
#line 159 "parser"
        {
            d_val__ = vs__(-1);
        }
        break;

        case 76:
#line 160 "parser"
        {
            d_val__ = vs__(-1);
        }
        break;

        case 77:
#line 161 "parser"
        {
            d_val__ = vs__(-2);
        }
        break;

        case 78:
#line 165 "parser"
        {
            d_val__ = vs__(-2);
        }
        break;

        case 79:
#line 166 "parser"
        {
            d_val__ = vs__(-4);
        }
        break;

        case 80:
#line 170 "parser"
        {
            d_val__ = vs__(-2);
        }
        break;

        case 82:
#line 174 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

        case 83:
#line 174 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

        case 84:
#line 175 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

        case 85:
#line 178 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

        case 86:
#line 178 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

        case 87:
#line 178 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

        case 88:
#line 178 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

        case 89:
#line 178 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

        case 90:
#line 178 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

        case 91:
#line 178 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

        case 92:
#line 179 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

        case 93:
#line 179 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

        case 94:
#line 179 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

        case 95:
#line 179 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

        case 96:
#line 179 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

        case 97:
#line 179 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

        case 98:
#line 180 "parser"
        {
            d_val__ = vs__(0);
        }
        break;

    }
}
catch (std::exception const &exc)
{
    exceptionHandler(exc);
}

// derived/nextcycle
void Parser::nextCycle__()
try
{
    if (s_state[state__()]->d_type & REQ_TOKEN)
        nextToken__();              // obtain next token


    int action = lookup__();        // lookup d_token in d_state

    if (action > 0)                 // SHIFT: push a new state
    {
        shift__(action);
        return;
    }

    if (action < 0)            // REDUCE: execute and pop.
    {

        if (recovery__())
            redoToken__();
        else
            executeAction__(-action);
                                            // next token is the rule's LHS
        reduce__(-action); 
        return;
    }

    if (recovery__())
        ABORT();
    else 
        ACCEPT();
}
catch (ErrorRecovery__)
{
    if (not recovery__())
        errorRecovery__();
    else
    {
        if (token__() == Reserved__::EOF__)
            ABORT();
        popToken__();               // skip the failing token
    }
}


// derived/nexttoken
void Parser::nextToken__()
{ 
    // If d_token is Reserved__::UNDETERMINED__ then if savedToken__() is
    // Reserved__::UNDETERMINED__ another token is obtained from lex(). Then
    // savedToken__() is assigned to d_token.

                                    // no need for a token: got one already
    if (token__() != Reserved__::UNDETERMINED__) 
    {
        return;                             
    }

    if (savedToken__() != Reserved__::UNDETERMINED__)
    {
        popToken__();               // consume pending token
    }
    else
    {
        ++d_acceptedTokens__;       // accept another token (see
                                    // errorRecover())
        lex__(lex());
        print__();
    }
    print();
}

// derived/print
void Parser::print__()
{
// $insert print
}

// derived/parse
int Parser::parse()
try 
{
    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and all relevant variables
    // are initialized by Base::clearin__.
    //
    // Then, in an eternal loop:
    //
    //  1. If a state is a REQ_TOKEN type, then the next token is obtained
    //     from nextToken().  This may very well be the currently available
    //     token. When retrieving a terminal token d_terminal is set to true.
    //
    //  2. lookup() is called, d_token is looked up in the current state's
    //     SR_ array.
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token is not found, and the state has no
    //     default reduction.

    clearin__();                            // initialize, push(0)

    while (true)
    {
// $insert prompt
        nextCycle__();
    }
}
catch (Return__ retValue)
{
    return retValue or d_nErrors__;
}


// derived/tail


